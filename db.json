{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1536571838422},{"_id":"source/.DS_Store","hash":"03b469f77861439ccb22bbefb3be12d1a35592c1","modified":1617703543390},{"_id":"themes/hexo-theme-next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1536571838421},{"_id":"themes/hexo-theme-next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1536571838423},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1536571838422},{"_id":"themes/hexo-theme-next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1536571838423},{"_id":"themes/hexo-theme-next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1536571838423},{"_id":"themes/hexo-theme-next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1536571838423},{"_id":"themes/hexo-theme-next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1536571838423},{"_id":"themes/hexo-theme-next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1536571838423},{"_id":"themes/hexo-theme-next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1536571838424},{"_id":"themes/hexo-theme-next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1536571838424},{"_id":"themes/hexo-theme-next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1536571838425},{"_id":"themes/hexo-theme-next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1536571838425},{"_id":"themes/hexo-theme-next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1536571838424},{"_id":"themes/hexo-theme-next/_config.yml","hash":"476ccce850f5014ecc36073200e5ce02ae4e8696","modified":1536574183305},{"_id":"themes/hexo-theme-next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1536571838446},{"_id":"source/_posts/二级建造师.md","hash":"ac1f125c47c54ace249b7ddf476357ca6aee75b9","modified":1618229047423},{"_id":"source/about/index.md","hash":"bebce3602da39403ebcd835659c49654f86e5dc5","modified":1536568200927},{"_id":"source/tags/BOS-Shiro.md","hash":"0edd7a17451f6d5ca08d9278769f68a51a7a1f9a","modified":1536568200927},{"_id":"source/tags/index.md","hash":"9471e13c92cadba6bb18f11edf3b6f81b064ae94","modified":1536568200928},{"_id":"source/categories/index.md","hash":"9e170b9b927f7f1c03804da488f98712b64ec957","modified":1536568200927},{"_id":"source/_posts/.DS_Store","hash":"717bec18b43eaee2dd835f222c134eb678122c0d","modified":1617629320725},{"_id":"themes/hexo-theme-next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1536571838415},{"_id":"themes/hexo-theme-next/.git/config","hash":"ca83ce520f770c3104c997d323b9f293dd920073","modified":1536571838417},{"_id":"themes/hexo-theme-next/.git/index","hash":"4b1c13ebb6dd995fa23c8d0cc643ca24ec086e2a","modified":1617545401306},{"_id":"themes/hexo-theme-next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1536571832355},{"_id":"themes/hexo-theme-next/.git/packed-refs","hash":"69237944e31c16fe545d1f47b0b1e5b1d99660da","modified":1536571838413},{"_id":"themes/hexo-theme-next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1536571838422},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1536571838422},{"_id":"themes/hexo-theme-next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1536571838422},{"_id":"themes/hexo-theme-next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1536571838423},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1536571838425},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1536571838425},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1536571838426},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1536571838426},{"_id":"themes/hexo-theme-next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1536571838426},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1536571838426},{"_id":"themes/hexo-theme-next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1536571838427},{"_id":"themes/hexo-theme-next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1536571838427},{"_id":"themes/hexo-theme-next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1536571838427},{"_id":"themes/hexo-theme-next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1536571838426},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1536571838427},{"_id":"themes/hexo-theme-next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1536571838427},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1536571838427},{"_id":"themes/hexo-theme-next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1536571838428},{"_id":"themes/hexo-theme-next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1536571838428},{"_id":"themes/hexo-theme-next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1536571838428},{"_id":"themes/hexo-theme-next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1536571838429},{"_id":"themes/hexo-theme-next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1536571838445},{"_id":"themes/hexo-theme-next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1536571838445},{"_id":"themes/hexo-theme-next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1536571838445},{"_id":"themes/hexo-theme-next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1536571838445},{"_id":"themes/hexo-theme-next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1536571838445},{"_id":"themes/hexo-theme-next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1536571838445},{"_id":"themes/hexo-theme-next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1536571838446},{"_id":"themes/hexo-theme-next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1536571838446},{"_id":"themes/hexo-theme-next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1536571838446},{"_id":"themes/hexo-theme-next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1536571838528},{"_id":"themes/hexo-theme-next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1536571838528},{"_id":"themes/hexo-theme-next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1536571838529},{"_id":"themes/hexo-theme-next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536571838474},{"_id":"themes/hexo-theme-next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1536571832355},{"_id":"themes/hexo-theme-next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1536571832356},{"_id":"themes/hexo-theme-next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1536571832356},{"_id":"themes/hexo-theme-next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1536571832357},{"_id":"themes/hexo-theme-next/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1536571832356},{"_id":"themes/hexo-theme-next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1536571832357},{"_id":"themes/hexo-theme-next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1536571832355},{"_id":"themes/hexo-theme-next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1536571832357},{"_id":"themes/hexo-theme-next/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1536571832354},{"_id":"themes/hexo-theme-next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1536571832356},{"_id":"themes/hexo-theme-next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1536571832356},{"_id":"themes/hexo-theme-next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1536571832357},{"_id":"themes/hexo-theme-next/.git/logs/HEAD","hash":"e1dbfd8e90ec1b498cc537b8dfde9d8e22980afa","modified":1536571838416},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1536571838429},{"_id":"themes/hexo-theme-next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1536571838429},{"_id":"themes/hexo-theme-next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1536571838429},{"_id":"themes/hexo-theme-next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1536571838429},{"_id":"themes/hexo-theme-next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1536571838430},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1536571838430},{"_id":"themes/hexo-theme-next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1536571838430},{"_id":"themes/hexo-theme-next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1536571838430},{"_id":"themes/hexo-theme-next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1536571838430},{"_id":"themes/hexo-theme-next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1536571838431},{"_id":"themes/hexo-theme-next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1536571838431},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1536571838432},{"_id":"themes/hexo-theme-next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1536571838432},{"_id":"themes/hexo-theme-next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1536571838434},{"_id":"themes/hexo-theme-next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1536571838434},{"_id":"themes/hexo-theme-next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1536571838428},{"_id":"themes/hexo-theme-next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1536571838428},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1536571838435},{"_id":"themes/hexo-theme-next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1536571838441},{"_id":"themes/hexo-theme-next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1536571838441},{"_id":"themes/hexo-theme-next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1536571838441},{"_id":"themes/hexo-theme-next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1536571838442},{"_id":"themes/hexo-theme-next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1536571838442},{"_id":"themes/hexo-theme-next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1536571838442},{"_id":"themes/hexo-theme-next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1536571838442},{"_id":"themes/hexo-theme-next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1536571838447},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1536571838447},{"_id":"themes/hexo-theme-next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1536571838447},{"_id":"themes/hexo-theme-next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1536571838447},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1536571838448},{"_id":"themes/hexo-theme-next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1536571838448},{"_id":"themes/hexo-theme-next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1536571838448},{"_id":"themes/hexo-theme-next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1536571838448},{"_id":"themes/hexo-theme-next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1536571838448},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1536571838474},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1536571838475},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1536571838475},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1536571838475},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1536571838475},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1536571838476},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1536571838476},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1536571838476},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1536571838477},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1536571838477},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1536571838477},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1536571838477},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1536571838478},{"_id":"themes/hexo-theme-next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1536571838478},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1536571838478},{"_id":"themes/hexo-theme-next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1536571838478},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1536571838478},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1536571838479},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1536571838479},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536571838434},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536571838435},{"_id":"themes/hexo-theme-next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536571838466},{"_id":"themes/hexo-theme-next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536571838466},{"_id":"themes/hexo-theme-next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536571838467},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536571838473},{"_id":"themes/hexo-theme-next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536571838474},{"_id":"themes/hexo-theme-next/.git/refs/heads/master","hash":"7999da428ebb87e5a2b27315d8d5123c1ccdfaa5","modified":1536571838415},{"_id":"themes/hexo-theme-next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1536571838431},{"_id":"themes/hexo-theme-next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1536571838431},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1536571838432},{"_id":"themes/hexo-theme-next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1536571838432},{"_id":"themes/hexo-theme-next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1536571838432},{"_id":"themes/hexo-theme-next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1536571838433},{"_id":"themes/hexo-theme-next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1536571838433},{"_id":"themes/hexo-theme-next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1536571838433},{"_id":"themes/hexo-theme-next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1536571838433},{"_id":"themes/hexo-theme-next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1536571838434},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1536571838434},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1536571838435},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1536571838435},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1536571838435},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1536571838436},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1536571838436},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1536571838436},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1536571838436},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1536571838436},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1536571838437},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1536571838437},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1536571838437},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1536571838438},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1536571838438},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1536571838438},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1536571838438},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1536571838439},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1536571838439},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1536571838440},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1536571838439},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1536571838440},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1536571838440},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1536571838440},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1536571838441},{"_id":"themes/hexo-theme-next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1536571838443},{"_id":"themes/hexo-theme-next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1536571838444},{"_id":"themes/hexo-theme-next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1536571838444},{"_id":"themes/hexo-theme-next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1536571838444},{"_id":"themes/hexo-theme-next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1536571838466},{"_id":"themes/hexo-theme-next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1536571838466},{"_id":"themes/hexo-theme-next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1536571838466},{"_id":"themes/hexo-theme-next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1536571838466},{"_id":"themes/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1536571838473},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1536571838473},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1536571838473},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1536571838474},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1536571838480},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1536571838479},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1536571838480},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1536571838480},{"_id":"themes/hexo-theme-next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1536571838481},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1536571838480},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1536571838481},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1536571838481},{"_id":"themes/hexo-theme-next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1536571838482},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1536571838482},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1536571838482},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1536571838489},{"_id":"themes/hexo-theme-next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1536571838489},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1536571838489},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1536571838486},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1536571838489},{"_id":"themes/hexo-theme-next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1536571838495},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1536571838494},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1536571838496},{"_id":"themes/hexo-theme-next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1536571838495},{"_id":"themes/hexo-theme-next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1536571838495},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1536571838496},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1536571838496},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1536571838497},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1536571838497},{"_id":"themes/hexo-theme-next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1536571838510},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1536571838511},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1536571838512},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1536571838511},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1536571838512},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1536571838512},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1536571838514},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1536571838512},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1536571838513},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1536571838514},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1536571838515},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1536571838513},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1536571838514},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1536571838515},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1536571838515},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1536571838515},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1536571838516},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1536571838516},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1536571838516},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1536571838516},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1536571838517},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1536571838517},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1536571838517},{"_id":"themes/hexo-theme-next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1536571838517},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1536571838518},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1536571838518},{"_id":"themes/hexo-theme-next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1536571838519},{"_id":"themes/hexo-theme-next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1536571838524},{"_id":"themes/hexo-theme-next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1536571838524},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1536571838527},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1536571838527},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1536571838528},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1536571838511},{"_id":"themes/hexo-theme-next/.git/logs/refs/heads/master","hash":"e1dbfd8e90ec1b498cc537b8dfde9d8e22980afa","modified":1536571838416},{"_id":"themes/hexo-theme-next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1536571838415},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1536571838443},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1536571838443},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1536571838449},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1536571838449},{"_id":"themes/hexo-theme-next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1536571838449},{"_id":"themes/hexo-theme-next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1536571838450},{"_id":"themes/hexo-theme-next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1536571838450},{"_id":"themes/hexo-theme-next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1536571838453},{"_id":"themes/hexo-theme-next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1536571838459},{"_id":"themes/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1536571838464},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1536571838464},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1536571838464},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1536571838465},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1536571838465},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1536571838465},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1536571838465},{"_id":"themes/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1536571838467},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1536571838468},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1536571838468},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1536571838467},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1536571838468},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1536571838468},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1536571838468},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1536571838469},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1536571838470},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1536571838470},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1536571838470},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1536571838470},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1536571838470},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1536571838471},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1536571838471},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1536571838472},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1536571838472},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1536571838472},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1536571838472},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1536571838482},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1536571838486},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1536571838485},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1536571838490},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1536571838490},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1536571838490},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1536571838490},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1536571838491},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1536571838491},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1536571838494},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1536571838493},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1536571838495},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1536571838494},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1536571838496},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1536571838498},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1536571838497},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1536571838497},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1536571838524},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1536571838523},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1536571838485},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1536571838485},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1536571838509},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1536571838526},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1536571838509},{"_id":"themes/hexo-theme-next/.git/logs/refs/remotes/origin/HEAD","hash":"e1dbfd8e90ec1b498cc537b8dfde9d8e22980afa","modified":1536571838414},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1536571838451},{"_id":"themes/hexo-theme-next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1536571838450},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1536571838450},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1536571838450},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1536571838451},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1536571838451},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1536571838451},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1536571838452},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1536571838452},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1536571838452},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1536571838452},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1536571838452},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1536571838453},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1536571838453},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1536571838453},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1536571838454},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1536571838454},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1536571838454},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1536571838454},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1536571838454},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1536571838455},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1536571838455},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1536571838455},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1536571838456},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1536571838455},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1536571838455},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1536571838456},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1536571838456},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1536571838456},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1536571838456},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1536571838457},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1536571838457},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1536571838457},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1536571838457},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1536571838459},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1536571838458},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1536571838458},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1536571838458},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1536571838459},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1536571838460},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1536571838459},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1536571838460},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1536571838461},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1536571838460},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1536571838460},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1536571838460},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1536571838461},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1536571838461},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1536571838462},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1536571838461},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1536571838462},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1536571838462},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1536571838462},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1536571838463},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1536571838463},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1536571838463},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1536571838463},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1536571838464},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1536571838469},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1536571838469},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1536571838471},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1536571838483},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1536571838483},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1536571838483},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1536571838484},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1536571838484},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1536571838491},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1536571838492},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1536571838492},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1536571838491},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1536571838492},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1536571838493},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1536571838500},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1536571838501},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1536571838488},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1536571838508},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-483e69441eebc7dbcda65cdaed376c2d7b233a33.idx","hash":"47ba91acfde23b3bc1c87674faa35b5580491963","modified":1536571838397},{"_id":"themes/hexo-theme-next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1536571838523},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1536571838505},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-483e69441eebc7dbcda65cdaed376c2d7b233a33.pack","hash":"d9e69c99d399b5bce1cab5f6f07ce106284673a7","modified":1536571838390},{"_id":"public/about/index.html","hash":"a78ec11a496334d9abab90fb93817fcd4545a39d","modified":1617717124678},{"_id":"public/tags/index.html","hash":"c3ffaa0ca9c7ece688f80a43cab5ab94f0681d43","modified":1617717124678},{"_id":"public/categories/index.html","hash":"09e309e91422546ca8a2bd3e5343f62b5547ea35","modified":1617717124678},{"_id":"public/categories/二级建造师/index.html","hash":"34e15bc14ff97aea5bf9385d2c18d5bccce26394","modified":1617717124678},{"_id":"public/archives/index.html","hash":"b434f99cdd77c3f2d26ab22229a0a28c8b0dc2a0","modified":1617717124678},{"_id":"public/archives/2018/index.html","hash":"68c0661ed2be23a4880de4033c68bf7058918c2d","modified":1617717124679},{"_id":"public/archives/2018/06/index.html","hash":"fd32a0ce94d8bdef94978f98b064d7691011b533","modified":1617717124679},{"_id":"public/tags/管理与实务/index.html","hash":"15b9d3e4fd4532284a7c6cec6786408983b403e6","modified":1617717124679},{"_id":"public/tags/BOS-Shiro.html","hash":"783b21fb9ccabb03f3ab0842abe76e7d6eebaf1c","modified":1617717124679},{"_id":"public/2018/06/05/二级建造师/index.html","hash":"567783983d60653c8b5899f7e5431169e49c032d","modified":1618229084918},{"_id":"public/index.html","hash":"39f4ce09be7e59b0c58c86f6276a1e862005e343","modified":1618229084918},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1617717124688},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1617717124688},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1617717124688},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1617717124688},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1617717124688},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1617717124688},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1617717124689},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1617717124689},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1617717124689},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1617717124689},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1617717124689},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1617717124689},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1617717124689},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1617717124689},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1617717124689},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1617717124689},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1617717124689},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1617717124689},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1617717124689},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1617717124689},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1617717124689},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1617717124689},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1617717124689},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1617717124689},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1617717124689},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1617717124689},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1617717124690},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1617717124690},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1617717124690},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1617717124690},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1617717124690},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1617717124690},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1617717124690},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1617717125092},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1617717125094},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1617717125099},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1617717125100},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1617717125100},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1617717125100},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1617717125100},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1617717125101},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1617717125101},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1617717125101},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1617717125101},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1617717125101},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1617717125101},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1617717125101},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1617717125101},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1617717125101},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1617717125101},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1617717125101},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1617717125101},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1617717125101},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1617717125101},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1617717125101},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1617717125101},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1617717125101},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1617717125101},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1617717125101},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1617717125101},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1617717125101},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1617717125101},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1617717125101},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1617717125101},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1617717125101},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1617717125101},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1617717125101},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1617717125101},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1617717125101},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1617717125101},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1617717125101},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1617717125101},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1617717125102},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1617717125102},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1617717125102},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1617717125102},{"_id":"public/css/main.css","hash":"5701d99e5c0fccbaa53a4d3ffd4918af3b455f0f","modified":1617717125102},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1617717125102},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1617717125102},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1617717125102},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1617717125104},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1617717125104},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1617717125104},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1617717125104},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1617717125104},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1617717125104},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1617717125104},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1617717125104},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1617717125108},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1617717125108},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1617717125110},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1617717125110},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1617717125115},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1617717125115},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1617717125116},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1617717125116},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1617717125116},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1617717125116},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1617717125116},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1617717125118},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1617717125118},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1617717125118},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1617717125119},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1617717125120},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1617717125122},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1617717125122},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1617717125124},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1617717125130},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1617717125131}],"Category":[{"name":"二级建造师","_id":"ckn6309le0004251y6y5m8eqp"}],"Data":[],"Page":[{"title":"","date":"2018-05-21T10:13:58.000Z","_content":"\n## Bill Zhang\n\nJava 开发小学生","source":"about/index.md","raw":"---\ntitle: \ndate: 2018-05-21 18:13:58\n---\n\n## Bill Zhang\n\nJava 开发小学生","updated":"2018-09-10T08:30:00.927Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckn6309kd0000251yjz1i338p","content":"<h2 id=\"Bill-Zhang\"><a href=\"#Bill-Zhang\" class=\"headerlink\" title=\"Bill Zhang\"></a>Bill Zhang</h2><p>Java 开发小学生</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Bill-Zhang\"><a href=\"#Bill-Zhang\" class=\"headerlink\" title=\"Bill Zhang\"></a>Bill Zhang</h2><p>Java 开发小学生</p>\n"},{"title":"","date":"2018-05-21T10:13:33.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle:  \ndate: 2018-05-21 18:13:33\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2018-09-10T08:30:00.928Z","path":"tags/index.html","comments":1,"_id":"ckn6309kf0001251ytrxrq3ol","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2018-05-21T10:11:32.000Z","type":"categories","layout":"categories","_content":"\n","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-05-21 18:11:32\ntype: \"categories\"\nlayout: \"categories\"\n---\n\n","updated":"2018-09-10T08:30:00.927Z","path":"categories/index.html","comments":1,"_id":"ckn6309kg0002251ymtcp7rpt","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"BOS-Shiro","date":"2015-10-19T22:49:50.000Z","tags":"shiro","_content":"### shiro\n\n#### 权限表设计原理说明\n首先，当用户访问没有地址时。根据用户请求资源路径-->查询数据库-->权限表（有无该访问的路径，如果有...doFilter放行）\n\n要根据登录用户，拿到用户的id-->多表查询-->functions权限表 \t 如果有这个路径就允许访问\n\n分为用户表、角色表、权限表\n\n用户和角色表是多对多的关系。\n\n在User对象中有\n\n```bash\nprivate Set<Role> roles = new HashSet<Role>(0);\n```\n\n之后，给用户添加权限就相当于往用户的这个集合中添加Role。操作集合的增删改查就相当于操作中间表的增删改差\n\n但是有一个前提，在修改的时候User必须是一个持久态。底层原理还是快照！！\n\n#### shiro和spring整合\n1. 将maven依赖导入到domain层\n```bash\n\t\t<dependency>\n\t\t\t<groupId>org.apache.shiro</groupId>\n\t\t\t<artifactId>shiro-all</artifactId>\n\t\t\t<version>${shiro.version}</version>\n\t\t</dependency>\n```\n2. 在web.xml中添加shiro  filter\n```bash\n    <!-- 权限控制 Filter  放到 struts2前端控制器前面 -->\n    <!-- shiro security filter -->\n    <filter>\n        <!-- 这里的 filter-name 要和 spring 的 applicationContext-shiro.xml 里的 org.apache.shiro.spring.web.ShiroFilterFactoryBean\n            的 bean name 相同 -->\n        <filter-name>shiroSecurityFilter</filter-name>\n        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\n        <init-param>\n            <param-name>targetFilterLifecycle</param-name>\n            <param-value>true</param-value>\n        </init-param>\n    </filter>\n    <filter-mapping>\n        <filter-name>shiroSecurityFilter</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n```\n\n这个Filter是spring提供，DelegationFilterProxy是代理Filter（会自动找 和\"<\"filter-name>\"同名的bean>对象）\n3. 在domain中创建applicationContext-shiro.xml\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n\thttp://www.springframework.org/schema/beans/spring-beans.xsd\n\">\n    <!--shiro认证和权限配置-->\n    <!-- shiro 权限控制 -->\n    <bean id=\"shiroSecurityFilter\" class=\"org.apache.shiro.spring.web.ShiroFilterFactoryBean\">\n        <!-- shiro 的核心安全接口 -->\n        <property name=\"securityManager\" ref=\"securityManager\" />\n        <!-- 要求登录时的链接 -->\n        <property name=\"loginUrl\" value=\"/login.jsp\" />\n        <!-- 登陆成功后要跳转的连接 -->\n        <property name=\"successUrl\" value=\"/index.jsp\" />\n        <!-- 权限不足，跳转路径  -->\n        <property name=\"unauthorizedUrl\" value=\"/unauthorized.jsp\" />\n        <!-- shiro 连接约束配置 -->\n        <!-- URL控制规则  路径=规则 -->\n        <property name=\"filterChainDefinitions\">\n            <value>\n                /css/** = anon\n                /demo/** = anon\n                /images/** = anon\n                /js/** = anon\n                /json/** = anon\n                /login.jsp** = anon\n                /index.jsp** = authc\n                /validatecode.jsp** = anon\n                /user/userAction_login** = anon\n                /user/userAction_validCheckCode** = anon\n                /** = authc\n                <!--//  除了上述配置 其他资源必须需要身份认证 (登陆)-->\n            </value>\n        </property>\n    </bean>\n\n    <!-- 安全管理器 -->\n    <bean id=\"securityManager\"\n          class=\"org.apache.shiro.web.mgt.DefaultWebSecurityManager\">\n        <!-- 在安全管理器，应该注入 Realm 连接安全数据  -->\n    </bean>\n\n</beans>\n```\n到这里struts.xml的登录拦截就没用了。\n而且这里按照之前的登录是登录不进去的，因为 Subject 和 Realm 都还没用创建。\n\n#### shiro_Subject编写说明\n由于使用了shiro所以原先的过滤器就没用了。\n```bash\nif (input_checkcode.equalsIgnoreCase(session_code)) {\n\t\t\t\t/*// 验证码一样，需要门面类去调dao\n\t\t\t\tUser existUser = serviceFacade.getUserService().login(model.getUsername(), model.getPassword());\n\t\t\t\tif (existUser == null) {\n\t\t\t\t\t// 数据库没查到\n\t\t\t\t\tthis.addActionError(this.getText(\"login.usernameOrPassword.error\"));\n\t\t\t\t\treturn \"login_error\";\n\t\t\t\t} else {\n\t\t\t\t\t// 将用户信息保存到session中\n\t\t\t\t\tsetSessionAttribute(\"existUser\", existUser);\n\t\t\t\t\treturn \"login_ok\";\n\t\t\t\t}*/\n\t\t\t\t//shiro  Subject 接收表单数据 封装  令牌对象中\n\t\t\t\t//1、获取subject\n\t\t\t\tSubject subject=SecurityUtils.getSubject();\n```\nSubject 是一个接口，所以不能实例化对象。要通过SecurityUtils.getSubject();来获取。\n```bash\nSubject subject=SecurityUtils.getSubject();\n```\nSubject实体类只封装令牌不做数据访问，因此需要一个令牌实体。\n```bash\nUsernamePasswordToken usernamePasswordToken=new UsernamePasswordToken(model.getUsername(),model.getPassword());\n```\n登录\n```bash\n//2、登录  subject只封装令牌不做数据访问\n\tsubject.login(usernamePasswordToken);  //login方法抛出异常  表示 登录身份失败 该方法没有异常认证成功\n```\n通过是否抛出异常来判断是否登录成功。为subject的login方法添加try/catch\n#### shiro_realm认证编码说明\nShiro是独立于web三层框架的。\n\n首先，需要编写一个 Realm 然后注入到 securityManager 中\n```bash\npublic class BosRealm extends AuthorizingRealm {\n    @Override\n    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {\n        //授权管理\n        System.out.println(\"---授权管理---\");\n        return null;\n    }\n\n    @Override\n    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {\n        //认证  realm  调用底层数据  和数据库比对  将bosrealm依赖注入安全管理器 SecurityManager\n        System.out.println(\"---认证---\");\n        return null;\n    }\n```\n注入到 securityManager\n```bash\n    <bean id=\"bosRealm\" class=\"com.zero.bos.realm.BosRealm\"></bean>\n\n\n    <!-- 安全管理器 -->\n    <bean id=\"securityManager\" class=\"org.apache.shiro.web.mgt.DefaultWebSecurityManager\">\n        <!-- 在安全管理器，应该注入 Realm 连接安全数据  -->\n        <property name=\"realm\" value=\"bosRealm\"></property>\n    </bean>\n```\ndoGetAuthorizationInfo :用于授权管理\n\nAuthenticationInfo ：登录认证\n\nrealm的底层是 调用底层数据和数据库进行比对\n\n如果 doGetAuthenticationInfo 方法的返回值是NULL  那么就表示身份认证失败了  如果不为NULL 返回 AuthenticationInfo 表示认证成功\n\n参数 AuthenticationToken 令牌就是  Subject.login（令牌） 拿到令牌就有了表单账户密码\n\n拿到令牌之后，调用业务层的dao查询数据库  返回User对象，如果查询数据库对象是存在的就进行认证流程\n\n认证流程注重密码：（1）账户是要保证唯一性的 （2）密码是加密的 只能重置不能直接拿到密码 \n\n令牌里的密码  和 查询用户得到的密码 进行比对\n\n\n#### shiro_realm认证编码实现\n\n\n```bash\n    public SimpleAuthenticationInfo(Object principal, Object credentials, String realmName) {\n        this.principals = new SimplePrincipalCollection(principal, realmName);\n        this.credentials = credentials;\n    }\n```\nBosRealm代码\n```bash\nUsernamePasswordToken userToken=(UsernamePasswordToken) token; //拿到密码和用户名\n\n        String username=userToken.getUsername(); //通过账户拿密码\n        //2、查询数据库\n        User existUser= serviceFacade.getUserService().findUserByUsername(username);\n        //进行判断\n        if (existUser==null){\n            return null;\n        }else {\n            //比对密码 AuthenticationInfo 对象 有三个参数 1、当前登录的用户信息  为后续获取用户信息准备\n            // 仅仅是为Subject提供信息不做比对 令牌才是比对\n            //参数2、数据库里面的真实密码   底层自动和令牌的密码比对 如果错误info是空值\n            //参数3：当前realm 在容器中 bean 的 id值  一般用方法拿而不是固定的名称\n            SimpleAuthenticationInfo info=new SimpleAuthenticationInfo(existUser,existUser.getPassword(),super.getName());\n            return info;\n        }\n```\n过程\n1. 首先通过传递过来的token拿到账户\n2. 通过账户去查询是否存在有这个账户的对象\n3. 拿到对象后进行对比密码\nSimpleAuthenticationInfo的三个参数：（1）当前登录的用户信息,仅仅为Subject提供数据，不做比对  （2）数据库里面的真实密码  （3）当前realm在容器中 bean 的id值，一般用方法获取而不是固定的\"BosRealm\"\n\n认证只走一次，Realm这个方法。\n\n如果密码错误后台会报错：\n\n```bash\norg.apache.shiro.authc.UnknownAccountException    //账户错误\norg.apache.shiro.authc.IncorrectCredentialsException  //密码错误\n```\n提升用户体验度\n在UserAction中添加代码\n```bash\n\t\t\t\tUsernamePasswordToken token=new UsernamePasswordToken(model.getUsername(),model.getPassword());\n\n\t\t\t\t//2、登录  subject只封装令牌不做数据访问\n\t\t\t\ttry {\n\t\t\t\t\tsubject.login(token);  //login方法抛出异常  表示 登录身份失败 该方法没有异常认证成功\n\t\t\t\t\treturn \"login_ok\";\n\t\t\t\t} catch (UnknownAccountException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t\tthis.addActionError(this.getText(\"login.username.error\"));\n\t\t\t\t\treturn \"login_error\";\n\t\t\t\t}catch (IncorrectCredentialsException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t\tthis.addActionError(this.getText(\"login.password.error\"));\n\t\t\t\t\treturn \"login_error\";\n\t\t\t\t}\n```\n国际化\n```bash\nlogin.username.error=账户不存在\nlogin.password.error=密码错误\n```\n\n#### shiro认证页面显示客户信息以及退出系统\n\n因为这个时候不再使用底层的session了。所以不显示本地的IP\n\n```javascript\n<div id=\"sessionInfoDiv\"\n   style=\"position: absolute;right: 5px;top:10px;\">\n   [<strong>超级管理员</strong>]，欢迎你${sessionScope.existUser.username}!\n   您使用[<strong>${pageContext.request.remoteAddr}</strong>]IP登录！\n</div>\n```\n\n使用shiro标签库来获取\n\n- 引入标签库\n\n```javascript\n<%@ taglib prefix=\"shiro\" uri=\"http://shiro.apache.org/tags\" %>\n```\n\n- 通过标签获取用户名\n\n  ```javascript\n  <div id=\"sessionInfoDiv\"\n     style=\"position: absolute;right: 5px;top:10px;\">\n     [<strong>超级管理员</strong>]，欢迎你<shiro:principal property=\"username\"></shiro:principal>!\n     您使用[<strong>${pageContext.request.remoteAddr}</strong>]IP登录！\n  </div>\n  ```\n\n\n\n退出登录修改\n\n**原来的代码**\n\n```javascript\n// 退出登录\nfunction logoutFun() {\n   $.messager\n   .confirm('系统提示','您确定要退出本次登录吗?',function(isConfirm) {\n      if (isConfirm) {\n         location.href = '${pageContext.request.contextPath }/login.jsp';\n      }\n   });\n```\n\n**改为**\n\n```javascript\n// 退出登录\nfunction logoutFun() {\n   $.messager\n   .confirm('系统提示','您确定要退出本次登录吗?',function(isConfirm) {\n      if (isConfirm) {\n         location.href = '${pageContext.request.contextPath }/user/userAction_logout';\n      }\n   });\n}\n```\n\n#### shiro授权临时数据录入\n\n1. 首先模拟一下权限不足的场景\n\n```java\n/page_base_region** = roles[\"base\"]  <!--需要有base这个角色才能访问这个路径 -->\n```\n\n上面这行代码表示  需要有base这个角色才可以访问这个路径\n\n在 struts.xml中\n\n```xml\n<!-- 需要进行权限控制的页面访问 -->\n<action name=\"page_*_*\">\n   <result type=\"dispatcher\">/WEB-INF/pages/{1}/{2}.jsp</result>\n</action>\n```\n\n那么这个时候，region页面放就访问不了了。\n\n![](https://github.com/whyathere/tuchuang/blob/master/Shiro/unauthorized.jpg?raw=true)\n\n当当前用户没有角色或者权限的时候就会向这里跳转\n\n```xml\n<!-- 权限不足，跳转路径  -->\n<property name=\"unauthorizedUrl\" value=\"/unauthorized.jsp\" />\n```\n\n思路：根据用户，查找到用户的ID，然后通过ID去查用户角色表\n\n```java\nSimpleAuthorizationInfo //实现类  提供 addRole（String） 角色 addStringPemission（String）权限\n```\n\n根据登录用户，查询 该用户具有的角色 拿到角色表设计code 值 添加到 该对象集合中/获取权限code 添加该对象 对象集合中\n\naddRole（String） 里的String 和xml文件中 roles[\"base\"]   的base进行比较\n\n```java\n@Override\nprotected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {\n    //AuthorizationInfo 授权管理 授权实现：根据当前登录用户  获取用户id  查询该用户在数据库表中  具有哪些角色 或者权限\n    System.out.println(\"---授权---\");\n    //1号 jack 1 角色 code：base 可以访问  region 资源\n    //2 号 rose 2角色 code：qupai 不可以访问 region 资源\n    SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();\n    Subject subject = SecurityUtils.getSubject();\n    User existUser = (User)subject.getPrincipal();\n    //系统  超级管理员 和登录用户 账户是唯一的\n    if (\"tom\".equals(existUser.getUsername())){\n        //将系统中所有的角色关键字 code 和所有的权限 code 都添加 Info\n        List<Role> roles=facadeService.getRoleService().findAllRoles();\n        for (Role role:roles){\n            info.addRole(role.getCode()); //具有所有角色的关键字\n        }\n        List<Function> functions=facadeService.getFunctionService().findAllFunctions();\n        for (Function function:functions){\n            info.addStringPermission(function.getCode());\n        }\n    }else {\n        //登录用户具有权限  根据当前登录用户 id  查询 该用户具有角色 以及 每个对应角色 对应权限\n\n    }\n    return info;\n}\n```\n\n创建RoleService、FunctionService、Impl以及Dao\n\n```java\nsubject.getPrincipal()  //获取对象\n```\n\n判断用户名是否是\"tom\".如果是的话就把所有的权限和用户关键字给到tom。\n\n返回info\n\n#### shiro授权之非超级管理员权限realm实现\n\n```java\n@Override\nprotected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {\n    //AuthorizationInfo 授权管理 授权实现：根据当前登录用户  获取用户id  查询该用户在数据库表中  具有哪些角色 或者权限\n    System.out.println(\"---授权---\");\n    //1号 jack 1 角色 code：base 可以访问  region 资源\n    //2 号 rose 2角色 code：qupai 不可以访问 region 资源\n    SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();\n    Subject subject = SecurityUtils.getSubject();\n    User existUser = (User) subject.getPrincipal();\n    //系统  超级管理员 和登录用户 账户是唯一的\n    if (\"tom\".equals(existUser.getUsername())) {\n        //将系统中所有的角色关键字 code 和所有的权限 code 都添加 Info\n        List<Role> roles = facadeService.getRoleService().findAllRoles();\n        for (Role role : roles) {\n            info.addRole(role.getCode()); //具有所有角色的关键字\n        }\n        List<Function> functions = facadeService.getFunctionService().findAllFunctions();\n        for (Function function : functions) {\n            info.addStringPermission(function.getCode());\n        }\n    } else {\n        //登录用户具有权限  根据当前登录用户 id  查询 该用户具有角色 以及 每个对应角色 对应权限\n        List<Role> roles = facadeService.getRoleService().findAllRolesByUserId(existUser.getId());\n        for (Role role : roles) {\n            info.addRole(role.getCode());\n            Set<Function> functions = role.getFunctions();  //每一个角色对应多个权限\n            for (Function function : functions) {\n                info.addStringPermission(function.getCode());\n            }\n        }\n    }\n    return info;\n}\n```\n\n```java\n//角色 role user_role 对象连接\npublic interface RoleDao extends JpaRepository<Role,String> {\n\n    @Query(\"from Role r inner join r.users u where u.id = ?1\")\n    public List<Role> findAllRolesByUserId(String id);\n```\n\nQuery语句说明：内连接，需要Role和 中间表（user_role）都存在，join r.users就连接上了。然后查找u.id 因为在user_role 有user也有role。\n\n对于jpa来说，它做多变关系连接的时候，它有一个叫做迫切内连接和非迫切内连接。同样的也有迫切外连接和非迫切外连接。\n\n**区别**：\n\n- **非迫切内连接 ：** 封装的结果集是Object[]。查的 时候并不是封装到List<Role> 而是 List<Object[]>而Object数组内部有两个元素，一个是Role一个是Role的关联Function\n- **迫切内连接 ：**查询的结果集  封装单一的对象里面，在对象的内部引入了关联的集合。Function\n\n如果想封装到单一的Role中，就需要用迫切。就必须要用关键字fetch，非迫切就不需要fetch。\n\n而我们的数据结果集是要封装到Role中的要加fetch\n\n```java\n@Query(\"from Role r inner join fetch r.users u where u.id = ?1\")\npublic List<Role> findAllRolesByUserId(String id);\n```\n\n这样Jpa会强制把结果集封装到单一的对象里去。\n\n如果不加fetch会放到一个Object集合中，第一个元素是Role第二个是Function集合\n\n这里泛型是和from后面跟的对象一致的\n\n这里就可以看出code关键字是base的可以访问“区域”页面。而没有这个关键字的不能访问。\n\n#### shiro注解权限控制配置说明\n\n目前想要访问region页面必须角色有这个的关键字\"base\"，现在jack 和tom 有，而rose没有\n\n![](https://github.com/whyathere/tuchuang/blob/master/Shiro/%E8%A7%92%E8%89%B2%E6%88%AA%E5%9B%BE.jpg?raw=true)\n\nrose是不能查询取派员的。\n\n方法级别只需要添加一个注解就可以给到这个权限了。\n\n```java\n// 取派员分页查询\n@Action(value = \"staffAction_pageQuery\")\n@RequiresRoles(value = \"base\")  //访问这个资源就需要有base权限\npublic String pageQuery() {\n   Map<String,Object> data=new HashMap<String,Object>();\n   try {\n      Page <Staff> pageData=serviceFacade.getStaffService().pageQuery(getPageRequest());\n      setPageData(pageData); //提供给父类\n      //dao  参数   Pageable pageable   自动完成分页查询   将分页结果数据   自动封装到Page<T>\n      //从Page  对象获取总记录数  和   每页分页记录数List<Staff>\n   } catch (Exception e) {\n      e.printStackTrace();\n      push(false);\n   }\n   return \"pageQuery\";  //走全局结果集\n}\n```\n\n@RequiresRoles(value = \"base\")   //访问这个资源就需要有base权限\n\n**注解方式原理：**\n\n首先目前就算加上注解还是不能用的。\n\nshiro 注解原理：注解信息是通过反射来读的\n\n涉及到动态代理：代理类对目标类方法进行加强。  方法是：pageQuery。采用了Spring 的aop来实现的。\n\naop：面向接口代理\n\n​\t代理类 $proxy。。和 目标类  StaffAction 的关系：\n\n​\t兄弟关系    都属于接口实现类\n\n代理类：面向目标类代理\n\n代理类和目标类  是 父子关系\n\n代理类是目标类  StaffAction 子类\n\n默认向  StaffAction  接口做代理类  ，shiro注解的代理类是向接口做代理\n\n\n\nshiro注解配置权限需要：\n\n1. 开启注解配置aop\n2. 目标方法上添加注解即可\n\n```xml\n<!--使用注解完成 权限管理  启用注解 需要配置3个bean-->\n<!-- spring bean 对象后处理器  -->\n<bean id=\"lifecycleBeanPostProcessor\" class=\"org.apache.shiro.spring.LifecycleBeanPostProcessor\"/>\n\n<!-- 切面自动代理 bean生成注解代理类实现者 修改代理类生成策略 面向接口 默认面向接口代理 -->\n<bean class=\"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator\"\n      depends-on=\"lifecycleBeanPostProcessor\"/>\n\n<!-- 切面 -->\n<bean class=\"org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor\">\n    <property name=\"securityManager\" ref=\"securityManager\"/>\n</bean>\n```\n\n\n\n这个时候取派员页面，tom可以正常访问显示。jack报错。\n\n```java\n11:42:00,780 ERROR Dispatcher:38 - Exception occurred during processing request: com.sun.proxy.$Proxy58.pageQuery()\n\njava.lang.NoSuchMethodException: com.sun.proxy.$Proxy58.pageQuery()\n\n```\n\n原因：默认是面向接口做代理，当前类有接口。但是当前类的接口没有pageQuery方法。\n\n```xml\n<!-- 切面自动代理 -->\n<bean class=\"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator\"\n      depends-on=\"lifecycleBeanPostProcessor\"/>\n```\n\n这个bean负责生成代理类。\n\n改为\n\n```xml\n<!-- 切面自动代理 -->\n<bean class=\"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator\"\n      depends-on=\"lifecycleBeanPostProcessor\">\n    <property name=\"proxyTargetClass\" value=\"false\"></property>\n</bean>\n```\n\n这样就从面向接口变为面向类\n\n这个时候还是木有啊！！\n\n新的异常\n\n![](https://github.com/whyathere/tuchuang/blob/master/Shiro/shiro%E5%BC%82%E5%B8%B8.jpg?raw=true)\n\n这里是报的父类的错，这说明类型不一样。\n\n父类获取子类参数化泛型  父类可以获取到  staff  可以进行实例化。\n\nBaseAction无法获取代理类泛型！\n\n默认是Object类型\n\n原因：代理类没有泛型，代理类是动态生成的。泛型在编译的时候有效，运行的时候就没有了。\n\n泛型的作用周期是编译期，运行的时候所有的泛型就都消失了。\n\n解决方法，不要从代理类去找。去父类找\n\n```java\n// 目的 获取子类参数化类型\n// 父类构造方法中 使用 参数化泛型+反射 获取子类具体泛型对应类型 newInstance 创建实例\npublic BaseAction() {\n    // 对model进行实例化， 通过子类 类声明的泛型\n    Type superclass = this.getClass().getGenericSuperclass();\n    if (!(superclass instanceof ParameterizedType)){\n        //没有代理类\n      superclass =  this.getClass().getSuperclass().getGenericSuperclass();\n    }\n    // 转化为参数化类型\n    ParameterizedType parameterizedType = (ParameterizedType) superclass;\n    // 获取一个泛型参数\n    Class<T> modelClass = (Class<T>) parameterizedType.getActualTypeArguments()[0];\n    try {\n        model = modelClass.newInstance();\n    } catch (InstantiationException e) {\n        e.printStackTrace();\n    } catch (IllegalAccessException e) {\n        e.printStackTrace();\n    }\n}\n```\n\n这次报了空指针异常\n\njava.lang.NullPointerException\n\n原因：在FacadeService中\n\n```java\n@Autowired\n// 注入 业务层实例\nprivate StaffService staffService;\n```\n\n这个注解没有将接口实例注入给接口\n\n![](https://github.com/whyathere/tuchuang/blob/master/Shiro/%E5%8E%9F%E5%9B%A0.jpg?raw=true)\n\n就是代理类没有继承@Autowried注解\n\n```xml\n<!--更改默认配置文件信息-->\n<constant name=\"struts.objectFactory.spring.autoWire.alwaysRespect\" value=\"true\"/>\n```\n\n在struts.xml中添加这个\n\n让代理类可以继承AutoWired注解\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"tags/BOS-Shiro.md","raw":"---\ntitle: BOS-Shiro\ndate: 2015-10-20 06:49:50\ntags: shiro\n---\n### shiro\n\n#### 权限表设计原理说明\n首先，当用户访问没有地址时。根据用户请求资源路径-->查询数据库-->权限表（有无该访问的路径，如果有...doFilter放行）\n\n要根据登录用户，拿到用户的id-->多表查询-->functions权限表 \t 如果有这个路径就允许访问\n\n分为用户表、角色表、权限表\n\n用户和角色表是多对多的关系。\n\n在User对象中有\n\n```bash\nprivate Set<Role> roles = new HashSet<Role>(0);\n```\n\n之后，给用户添加权限就相当于往用户的这个集合中添加Role。操作集合的增删改查就相当于操作中间表的增删改差\n\n但是有一个前提，在修改的时候User必须是一个持久态。底层原理还是快照！！\n\n#### shiro和spring整合\n1. 将maven依赖导入到domain层\n```bash\n\t\t<dependency>\n\t\t\t<groupId>org.apache.shiro</groupId>\n\t\t\t<artifactId>shiro-all</artifactId>\n\t\t\t<version>${shiro.version}</version>\n\t\t</dependency>\n```\n2. 在web.xml中添加shiro  filter\n```bash\n    <!-- 权限控制 Filter  放到 struts2前端控制器前面 -->\n    <!-- shiro security filter -->\n    <filter>\n        <!-- 这里的 filter-name 要和 spring 的 applicationContext-shiro.xml 里的 org.apache.shiro.spring.web.ShiroFilterFactoryBean\n            的 bean name 相同 -->\n        <filter-name>shiroSecurityFilter</filter-name>\n        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\n        <init-param>\n            <param-name>targetFilterLifecycle</param-name>\n            <param-value>true</param-value>\n        </init-param>\n    </filter>\n    <filter-mapping>\n        <filter-name>shiroSecurityFilter</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n```\n\n这个Filter是spring提供，DelegationFilterProxy是代理Filter（会自动找 和\"<\"filter-name>\"同名的bean>对象）\n3. 在domain中创建applicationContext-shiro.xml\n```bash\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n\thttp://www.springframework.org/schema/beans/spring-beans.xsd\n\">\n    <!--shiro认证和权限配置-->\n    <!-- shiro 权限控制 -->\n    <bean id=\"shiroSecurityFilter\" class=\"org.apache.shiro.spring.web.ShiroFilterFactoryBean\">\n        <!-- shiro 的核心安全接口 -->\n        <property name=\"securityManager\" ref=\"securityManager\" />\n        <!-- 要求登录时的链接 -->\n        <property name=\"loginUrl\" value=\"/login.jsp\" />\n        <!-- 登陆成功后要跳转的连接 -->\n        <property name=\"successUrl\" value=\"/index.jsp\" />\n        <!-- 权限不足，跳转路径  -->\n        <property name=\"unauthorizedUrl\" value=\"/unauthorized.jsp\" />\n        <!-- shiro 连接约束配置 -->\n        <!-- URL控制规则  路径=规则 -->\n        <property name=\"filterChainDefinitions\">\n            <value>\n                /css/** = anon\n                /demo/** = anon\n                /images/** = anon\n                /js/** = anon\n                /json/** = anon\n                /login.jsp** = anon\n                /index.jsp** = authc\n                /validatecode.jsp** = anon\n                /user/userAction_login** = anon\n                /user/userAction_validCheckCode** = anon\n                /** = authc\n                <!--//  除了上述配置 其他资源必须需要身份认证 (登陆)-->\n            </value>\n        </property>\n    </bean>\n\n    <!-- 安全管理器 -->\n    <bean id=\"securityManager\"\n          class=\"org.apache.shiro.web.mgt.DefaultWebSecurityManager\">\n        <!-- 在安全管理器，应该注入 Realm 连接安全数据  -->\n    </bean>\n\n</beans>\n```\n到这里struts.xml的登录拦截就没用了。\n而且这里按照之前的登录是登录不进去的，因为 Subject 和 Realm 都还没用创建。\n\n#### shiro_Subject编写说明\n由于使用了shiro所以原先的过滤器就没用了。\n```bash\nif (input_checkcode.equalsIgnoreCase(session_code)) {\n\t\t\t\t/*// 验证码一样，需要门面类去调dao\n\t\t\t\tUser existUser = serviceFacade.getUserService().login(model.getUsername(), model.getPassword());\n\t\t\t\tif (existUser == null) {\n\t\t\t\t\t// 数据库没查到\n\t\t\t\t\tthis.addActionError(this.getText(\"login.usernameOrPassword.error\"));\n\t\t\t\t\treturn \"login_error\";\n\t\t\t\t} else {\n\t\t\t\t\t// 将用户信息保存到session中\n\t\t\t\t\tsetSessionAttribute(\"existUser\", existUser);\n\t\t\t\t\treturn \"login_ok\";\n\t\t\t\t}*/\n\t\t\t\t//shiro  Subject 接收表单数据 封装  令牌对象中\n\t\t\t\t//1、获取subject\n\t\t\t\tSubject subject=SecurityUtils.getSubject();\n```\nSubject 是一个接口，所以不能实例化对象。要通过SecurityUtils.getSubject();来获取。\n```bash\nSubject subject=SecurityUtils.getSubject();\n```\nSubject实体类只封装令牌不做数据访问，因此需要一个令牌实体。\n```bash\nUsernamePasswordToken usernamePasswordToken=new UsernamePasswordToken(model.getUsername(),model.getPassword());\n```\n登录\n```bash\n//2、登录  subject只封装令牌不做数据访问\n\tsubject.login(usernamePasswordToken);  //login方法抛出异常  表示 登录身份失败 该方法没有异常认证成功\n```\n通过是否抛出异常来判断是否登录成功。为subject的login方法添加try/catch\n#### shiro_realm认证编码说明\nShiro是独立于web三层框架的。\n\n首先，需要编写一个 Realm 然后注入到 securityManager 中\n```bash\npublic class BosRealm extends AuthorizingRealm {\n    @Override\n    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {\n        //授权管理\n        System.out.println(\"---授权管理---\");\n        return null;\n    }\n\n    @Override\n    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {\n        //认证  realm  调用底层数据  和数据库比对  将bosrealm依赖注入安全管理器 SecurityManager\n        System.out.println(\"---认证---\");\n        return null;\n    }\n```\n注入到 securityManager\n```bash\n    <bean id=\"bosRealm\" class=\"com.zero.bos.realm.BosRealm\"></bean>\n\n\n    <!-- 安全管理器 -->\n    <bean id=\"securityManager\" class=\"org.apache.shiro.web.mgt.DefaultWebSecurityManager\">\n        <!-- 在安全管理器，应该注入 Realm 连接安全数据  -->\n        <property name=\"realm\" value=\"bosRealm\"></property>\n    </bean>\n```\ndoGetAuthorizationInfo :用于授权管理\n\nAuthenticationInfo ：登录认证\n\nrealm的底层是 调用底层数据和数据库进行比对\n\n如果 doGetAuthenticationInfo 方法的返回值是NULL  那么就表示身份认证失败了  如果不为NULL 返回 AuthenticationInfo 表示认证成功\n\n参数 AuthenticationToken 令牌就是  Subject.login（令牌） 拿到令牌就有了表单账户密码\n\n拿到令牌之后，调用业务层的dao查询数据库  返回User对象，如果查询数据库对象是存在的就进行认证流程\n\n认证流程注重密码：（1）账户是要保证唯一性的 （2）密码是加密的 只能重置不能直接拿到密码 \n\n令牌里的密码  和 查询用户得到的密码 进行比对\n\n\n#### shiro_realm认证编码实现\n\n\n```bash\n    public SimpleAuthenticationInfo(Object principal, Object credentials, String realmName) {\n        this.principals = new SimplePrincipalCollection(principal, realmName);\n        this.credentials = credentials;\n    }\n```\nBosRealm代码\n```bash\nUsernamePasswordToken userToken=(UsernamePasswordToken) token; //拿到密码和用户名\n\n        String username=userToken.getUsername(); //通过账户拿密码\n        //2、查询数据库\n        User existUser= serviceFacade.getUserService().findUserByUsername(username);\n        //进行判断\n        if (existUser==null){\n            return null;\n        }else {\n            //比对密码 AuthenticationInfo 对象 有三个参数 1、当前登录的用户信息  为后续获取用户信息准备\n            // 仅仅是为Subject提供信息不做比对 令牌才是比对\n            //参数2、数据库里面的真实密码   底层自动和令牌的密码比对 如果错误info是空值\n            //参数3：当前realm 在容器中 bean 的 id值  一般用方法拿而不是固定的名称\n            SimpleAuthenticationInfo info=new SimpleAuthenticationInfo(existUser,existUser.getPassword(),super.getName());\n            return info;\n        }\n```\n过程\n1. 首先通过传递过来的token拿到账户\n2. 通过账户去查询是否存在有这个账户的对象\n3. 拿到对象后进行对比密码\nSimpleAuthenticationInfo的三个参数：（1）当前登录的用户信息,仅仅为Subject提供数据，不做比对  （2）数据库里面的真实密码  （3）当前realm在容器中 bean 的id值，一般用方法获取而不是固定的\"BosRealm\"\n\n认证只走一次，Realm这个方法。\n\n如果密码错误后台会报错：\n\n```bash\norg.apache.shiro.authc.UnknownAccountException    //账户错误\norg.apache.shiro.authc.IncorrectCredentialsException  //密码错误\n```\n提升用户体验度\n在UserAction中添加代码\n```bash\n\t\t\t\tUsernamePasswordToken token=new UsernamePasswordToken(model.getUsername(),model.getPassword());\n\n\t\t\t\t//2、登录  subject只封装令牌不做数据访问\n\t\t\t\ttry {\n\t\t\t\t\tsubject.login(token);  //login方法抛出异常  表示 登录身份失败 该方法没有异常认证成功\n\t\t\t\t\treturn \"login_ok\";\n\t\t\t\t} catch (UnknownAccountException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t\tthis.addActionError(this.getText(\"login.username.error\"));\n\t\t\t\t\treturn \"login_error\";\n\t\t\t\t}catch (IncorrectCredentialsException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t\tthis.addActionError(this.getText(\"login.password.error\"));\n\t\t\t\t\treturn \"login_error\";\n\t\t\t\t}\n```\n国际化\n```bash\nlogin.username.error=账户不存在\nlogin.password.error=密码错误\n```\n\n#### shiro认证页面显示客户信息以及退出系统\n\n因为这个时候不再使用底层的session了。所以不显示本地的IP\n\n```javascript\n<div id=\"sessionInfoDiv\"\n   style=\"position: absolute;right: 5px;top:10px;\">\n   [<strong>超级管理员</strong>]，欢迎你${sessionScope.existUser.username}!\n   您使用[<strong>${pageContext.request.remoteAddr}</strong>]IP登录！\n</div>\n```\n\n使用shiro标签库来获取\n\n- 引入标签库\n\n```javascript\n<%@ taglib prefix=\"shiro\" uri=\"http://shiro.apache.org/tags\" %>\n```\n\n- 通过标签获取用户名\n\n  ```javascript\n  <div id=\"sessionInfoDiv\"\n     style=\"position: absolute;right: 5px;top:10px;\">\n     [<strong>超级管理员</strong>]，欢迎你<shiro:principal property=\"username\"></shiro:principal>!\n     您使用[<strong>${pageContext.request.remoteAddr}</strong>]IP登录！\n  </div>\n  ```\n\n\n\n退出登录修改\n\n**原来的代码**\n\n```javascript\n// 退出登录\nfunction logoutFun() {\n   $.messager\n   .confirm('系统提示','您确定要退出本次登录吗?',function(isConfirm) {\n      if (isConfirm) {\n         location.href = '${pageContext.request.contextPath }/login.jsp';\n      }\n   });\n```\n\n**改为**\n\n```javascript\n// 退出登录\nfunction logoutFun() {\n   $.messager\n   .confirm('系统提示','您确定要退出本次登录吗?',function(isConfirm) {\n      if (isConfirm) {\n         location.href = '${pageContext.request.contextPath }/user/userAction_logout';\n      }\n   });\n}\n```\n\n#### shiro授权临时数据录入\n\n1. 首先模拟一下权限不足的场景\n\n```java\n/page_base_region** = roles[\"base\"]  <!--需要有base这个角色才能访问这个路径 -->\n```\n\n上面这行代码表示  需要有base这个角色才可以访问这个路径\n\n在 struts.xml中\n\n```xml\n<!-- 需要进行权限控制的页面访问 -->\n<action name=\"page_*_*\">\n   <result type=\"dispatcher\">/WEB-INF/pages/{1}/{2}.jsp</result>\n</action>\n```\n\n那么这个时候，region页面放就访问不了了。\n\n![](https://github.com/whyathere/tuchuang/blob/master/Shiro/unauthorized.jpg?raw=true)\n\n当当前用户没有角色或者权限的时候就会向这里跳转\n\n```xml\n<!-- 权限不足，跳转路径  -->\n<property name=\"unauthorizedUrl\" value=\"/unauthorized.jsp\" />\n```\n\n思路：根据用户，查找到用户的ID，然后通过ID去查用户角色表\n\n```java\nSimpleAuthorizationInfo //实现类  提供 addRole（String） 角色 addStringPemission（String）权限\n```\n\n根据登录用户，查询 该用户具有的角色 拿到角色表设计code 值 添加到 该对象集合中/获取权限code 添加该对象 对象集合中\n\naddRole（String） 里的String 和xml文件中 roles[\"base\"]   的base进行比较\n\n```java\n@Override\nprotected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {\n    //AuthorizationInfo 授权管理 授权实现：根据当前登录用户  获取用户id  查询该用户在数据库表中  具有哪些角色 或者权限\n    System.out.println(\"---授权---\");\n    //1号 jack 1 角色 code：base 可以访问  region 资源\n    //2 号 rose 2角色 code：qupai 不可以访问 region 资源\n    SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();\n    Subject subject = SecurityUtils.getSubject();\n    User existUser = (User)subject.getPrincipal();\n    //系统  超级管理员 和登录用户 账户是唯一的\n    if (\"tom\".equals(existUser.getUsername())){\n        //将系统中所有的角色关键字 code 和所有的权限 code 都添加 Info\n        List<Role> roles=facadeService.getRoleService().findAllRoles();\n        for (Role role:roles){\n            info.addRole(role.getCode()); //具有所有角色的关键字\n        }\n        List<Function> functions=facadeService.getFunctionService().findAllFunctions();\n        for (Function function:functions){\n            info.addStringPermission(function.getCode());\n        }\n    }else {\n        //登录用户具有权限  根据当前登录用户 id  查询 该用户具有角色 以及 每个对应角色 对应权限\n\n    }\n    return info;\n}\n```\n\n创建RoleService、FunctionService、Impl以及Dao\n\n```java\nsubject.getPrincipal()  //获取对象\n```\n\n判断用户名是否是\"tom\".如果是的话就把所有的权限和用户关键字给到tom。\n\n返回info\n\n#### shiro授权之非超级管理员权限realm实现\n\n```java\n@Override\nprotected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {\n    //AuthorizationInfo 授权管理 授权实现：根据当前登录用户  获取用户id  查询该用户在数据库表中  具有哪些角色 或者权限\n    System.out.println(\"---授权---\");\n    //1号 jack 1 角色 code：base 可以访问  region 资源\n    //2 号 rose 2角色 code：qupai 不可以访问 region 资源\n    SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();\n    Subject subject = SecurityUtils.getSubject();\n    User existUser = (User) subject.getPrincipal();\n    //系统  超级管理员 和登录用户 账户是唯一的\n    if (\"tom\".equals(existUser.getUsername())) {\n        //将系统中所有的角色关键字 code 和所有的权限 code 都添加 Info\n        List<Role> roles = facadeService.getRoleService().findAllRoles();\n        for (Role role : roles) {\n            info.addRole(role.getCode()); //具有所有角色的关键字\n        }\n        List<Function> functions = facadeService.getFunctionService().findAllFunctions();\n        for (Function function : functions) {\n            info.addStringPermission(function.getCode());\n        }\n    } else {\n        //登录用户具有权限  根据当前登录用户 id  查询 该用户具有角色 以及 每个对应角色 对应权限\n        List<Role> roles = facadeService.getRoleService().findAllRolesByUserId(existUser.getId());\n        for (Role role : roles) {\n            info.addRole(role.getCode());\n            Set<Function> functions = role.getFunctions();  //每一个角色对应多个权限\n            for (Function function : functions) {\n                info.addStringPermission(function.getCode());\n            }\n        }\n    }\n    return info;\n}\n```\n\n```java\n//角色 role user_role 对象连接\npublic interface RoleDao extends JpaRepository<Role,String> {\n\n    @Query(\"from Role r inner join r.users u where u.id = ?1\")\n    public List<Role> findAllRolesByUserId(String id);\n```\n\nQuery语句说明：内连接，需要Role和 中间表（user_role）都存在，join r.users就连接上了。然后查找u.id 因为在user_role 有user也有role。\n\n对于jpa来说，它做多变关系连接的时候，它有一个叫做迫切内连接和非迫切内连接。同样的也有迫切外连接和非迫切外连接。\n\n**区别**：\n\n- **非迫切内连接 ：** 封装的结果集是Object[]。查的 时候并不是封装到List<Role> 而是 List<Object[]>而Object数组内部有两个元素，一个是Role一个是Role的关联Function\n- **迫切内连接 ：**查询的结果集  封装单一的对象里面，在对象的内部引入了关联的集合。Function\n\n如果想封装到单一的Role中，就需要用迫切。就必须要用关键字fetch，非迫切就不需要fetch。\n\n而我们的数据结果集是要封装到Role中的要加fetch\n\n```java\n@Query(\"from Role r inner join fetch r.users u where u.id = ?1\")\npublic List<Role> findAllRolesByUserId(String id);\n```\n\n这样Jpa会强制把结果集封装到单一的对象里去。\n\n如果不加fetch会放到一个Object集合中，第一个元素是Role第二个是Function集合\n\n这里泛型是和from后面跟的对象一致的\n\n这里就可以看出code关键字是base的可以访问“区域”页面。而没有这个关键字的不能访问。\n\n#### shiro注解权限控制配置说明\n\n目前想要访问region页面必须角色有这个的关键字\"base\"，现在jack 和tom 有，而rose没有\n\n![](https://github.com/whyathere/tuchuang/blob/master/Shiro/%E8%A7%92%E8%89%B2%E6%88%AA%E5%9B%BE.jpg?raw=true)\n\nrose是不能查询取派员的。\n\n方法级别只需要添加一个注解就可以给到这个权限了。\n\n```java\n// 取派员分页查询\n@Action(value = \"staffAction_pageQuery\")\n@RequiresRoles(value = \"base\")  //访问这个资源就需要有base权限\npublic String pageQuery() {\n   Map<String,Object> data=new HashMap<String,Object>();\n   try {\n      Page <Staff> pageData=serviceFacade.getStaffService().pageQuery(getPageRequest());\n      setPageData(pageData); //提供给父类\n      //dao  参数   Pageable pageable   自动完成分页查询   将分页结果数据   自动封装到Page<T>\n      //从Page  对象获取总记录数  和   每页分页记录数List<Staff>\n   } catch (Exception e) {\n      e.printStackTrace();\n      push(false);\n   }\n   return \"pageQuery\";  //走全局结果集\n}\n```\n\n@RequiresRoles(value = \"base\")   //访问这个资源就需要有base权限\n\n**注解方式原理：**\n\n首先目前就算加上注解还是不能用的。\n\nshiro 注解原理：注解信息是通过反射来读的\n\n涉及到动态代理：代理类对目标类方法进行加强。  方法是：pageQuery。采用了Spring 的aop来实现的。\n\naop：面向接口代理\n\n​\t代理类 $proxy。。和 目标类  StaffAction 的关系：\n\n​\t兄弟关系    都属于接口实现类\n\n代理类：面向目标类代理\n\n代理类和目标类  是 父子关系\n\n代理类是目标类  StaffAction 子类\n\n默认向  StaffAction  接口做代理类  ，shiro注解的代理类是向接口做代理\n\n\n\nshiro注解配置权限需要：\n\n1. 开启注解配置aop\n2. 目标方法上添加注解即可\n\n```xml\n<!--使用注解完成 权限管理  启用注解 需要配置3个bean-->\n<!-- spring bean 对象后处理器  -->\n<bean id=\"lifecycleBeanPostProcessor\" class=\"org.apache.shiro.spring.LifecycleBeanPostProcessor\"/>\n\n<!-- 切面自动代理 bean生成注解代理类实现者 修改代理类生成策略 面向接口 默认面向接口代理 -->\n<bean class=\"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator\"\n      depends-on=\"lifecycleBeanPostProcessor\"/>\n\n<!-- 切面 -->\n<bean class=\"org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor\">\n    <property name=\"securityManager\" ref=\"securityManager\"/>\n</bean>\n```\n\n\n\n这个时候取派员页面，tom可以正常访问显示。jack报错。\n\n```java\n11:42:00,780 ERROR Dispatcher:38 - Exception occurred during processing request: com.sun.proxy.$Proxy58.pageQuery()\n\njava.lang.NoSuchMethodException: com.sun.proxy.$Proxy58.pageQuery()\n\n```\n\n原因：默认是面向接口做代理，当前类有接口。但是当前类的接口没有pageQuery方法。\n\n```xml\n<!-- 切面自动代理 -->\n<bean class=\"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator\"\n      depends-on=\"lifecycleBeanPostProcessor\"/>\n```\n\n这个bean负责生成代理类。\n\n改为\n\n```xml\n<!-- 切面自动代理 -->\n<bean class=\"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator\"\n      depends-on=\"lifecycleBeanPostProcessor\">\n    <property name=\"proxyTargetClass\" value=\"false\"></property>\n</bean>\n```\n\n这样就从面向接口变为面向类\n\n这个时候还是木有啊！！\n\n新的异常\n\n![](https://github.com/whyathere/tuchuang/blob/master/Shiro/shiro%E5%BC%82%E5%B8%B8.jpg?raw=true)\n\n这里是报的父类的错，这说明类型不一样。\n\n父类获取子类参数化泛型  父类可以获取到  staff  可以进行实例化。\n\nBaseAction无法获取代理类泛型！\n\n默认是Object类型\n\n原因：代理类没有泛型，代理类是动态生成的。泛型在编译的时候有效，运行的时候就没有了。\n\n泛型的作用周期是编译期，运行的时候所有的泛型就都消失了。\n\n解决方法，不要从代理类去找。去父类找\n\n```java\n// 目的 获取子类参数化类型\n// 父类构造方法中 使用 参数化泛型+反射 获取子类具体泛型对应类型 newInstance 创建实例\npublic BaseAction() {\n    // 对model进行实例化， 通过子类 类声明的泛型\n    Type superclass = this.getClass().getGenericSuperclass();\n    if (!(superclass instanceof ParameterizedType)){\n        //没有代理类\n      superclass =  this.getClass().getSuperclass().getGenericSuperclass();\n    }\n    // 转化为参数化类型\n    ParameterizedType parameterizedType = (ParameterizedType) superclass;\n    // 获取一个泛型参数\n    Class<T> modelClass = (Class<T>) parameterizedType.getActualTypeArguments()[0];\n    try {\n        model = modelClass.newInstance();\n    } catch (InstantiationException e) {\n        e.printStackTrace();\n    } catch (IllegalAccessException e) {\n        e.printStackTrace();\n    }\n}\n```\n\n这次报了空指针异常\n\njava.lang.NullPointerException\n\n原因：在FacadeService中\n\n```java\n@Autowired\n// 注入 业务层实例\nprivate StaffService staffService;\n```\n\n这个注解没有将接口实例注入给接口\n\n![](https://github.com/whyathere/tuchuang/blob/master/Shiro/%E5%8E%9F%E5%9B%A0.jpg?raw=true)\n\n就是代理类没有继承@Autowried注解\n\n```xml\n<!--更改默认配置文件信息-->\n<constant name=\"struts.objectFactory.spring.autoWire.alwaysRespect\" value=\"true\"/>\n```\n\n在struts.xml中添加这个\n\n让代理类可以继承AutoWired注解\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","updated":"2018-09-10T08:30:00.927Z","path":"tags/BOS-Shiro.html","comments":1,"layout":"page","_id":"ckn6309mm0008251yf7l3173n","content":"<h3 id=\"shiro\"><a href=\"#shiro\" class=\"headerlink\" title=\"shiro\"></a>shiro</h3><h4 id=\"权限表设计原理说明\"><a href=\"#权限表设计原理说明\" class=\"headerlink\" title=\"权限表设计原理说明\"></a>权限表设计原理说明</h4><p>首先，当用户访问没有地址时。根据用户请求资源路径–&gt;查询数据库–&gt;权限表（有无该访问的路径，如果有…doFilter放行）</p>\n<p>要根据登录用户，拿到用户的id–&gt;多表查询–&gt;functions权限表      如果有这个路径就允许访问</p>\n<p>分为用户表、角色表、权限表</p>\n<p>用户和角色表是多对多的关系。</p>\n<p>在User对象中有</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private Set&lt;Role&gt; roles = new HashSet&lt;Role&gt;(0);</span><br></pre></td></tr></table></figure>\n<p>之后，给用户添加权限就相当于往用户的这个集合中添加Role。操作集合的增删改查就相当于操作中间表的增删改差</p>\n<p>但是有一个前提，在修改的时候User必须是一个持久态。底层原理还是快照！！</p>\n<h4 id=\"shiro和spring整合\"><a href=\"#shiro和spring整合\" class=\"headerlink\" title=\"shiro和spring整合\"></a>shiro和spring整合</h4><ol>\n<li><p>将maven依赖导入到domain层</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;shiro-all&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;<span class=\"variable\">$&#123;shiro.version&#125;</span>&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在web.xml中添加shiro  filter</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 权限控制 Filter  放到 struts2前端控制器前面 --&gt;</span><br><span class=\"line\">&lt;!-- shiro security filter --&gt;</span><br><span class=\"line\">&lt;filter&gt;</span><br><span class=\"line\">    &lt;!-- 这里的 filter-name 要和 spring 的 applicationContext-shiro.xml 里的 org.apache.shiro.spring.web.ShiroFilterFactoryBean</span><br><span class=\"line\">        的 bean name 相同 --&gt;</span><br><span class=\"line\">    &lt;filter-name&gt;shiroSecurityFilter&lt;/filter-name&gt;</span><br><span class=\"line\">    &lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt;</span><br><span class=\"line\">    &lt;init-param&gt;</span><br><span class=\"line\">        &lt;param-name&gt;targetFilterLifecycle&lt;/param-name&gt;</span><br><span class=\"line\">        &lt;param-value&gt;<span class=\"literal\">true</span>&lt;/param-value&gt;</span><br><span class=\"line\">    &lt;/init-param&gt;</span><br><span class=\"line\">&lt;/filter&gt;</span><br><span class=\"line\">&lt;filter-mapping&gt;</span><br><span class=\"line\">    &lt;filter-name&gt;shiroSecurityFilter&lt;/filter-name&gt;</span><br><span class=\"line\">    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class=\"line\">&lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这个Filter是spring提供，DelegationFilterProxy是代理Filter（会自动找 和”&lt;”filter-name&gt;”同名的bean&gt;对象）</p>\n<ol start=\"3\">\n<li>在domain中创建applicationContext-shiro.xml<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;beans xmlns=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span><br><span class=\"line\">       xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">       xsi:schemaLocation=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span><br><span class=\"line\"><span class=\"string\">\thttp://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class=\"line\"><span class=\"string\">\"</span>&gt;</span><br><span class=\"line\">    &lt;!--shiro认证和权限配置--&gt;</span><br><span class=\"line\">    &lt;!-- shiro 权限控制 --&gt;</span><br><span class=\"line\">    &lt;bean id=<span class=\"string\">\"shiroSecurityFilter\"</span> class=<span class=\"string\">\"org.apache.shiro.spring.web.ShiroFilterFactoryBean\"</span>&gt;</span><br><span class=\"line\">        &lt;!-- shiro 的核心安全接口 --&gt;</span><br><span class=\"line\">        &lt;property name=<span class=\"string\">\"securityManager\"</span> ref=<span class=\"string\">\"securityManager\"</span> /&gt;</span><br><span class=\"line\">        &lt;!-- 要求登录时的链接 --&gt;</span><br><span class=\"line\">        &lt;property name=<span class=\"string\">\"loginUrl\"</span> value=<span class=\"string\">\"/login.jsp\"</span> /&gt;</span><br><span class=\"line\">        &lt;!-- 登陆成功后要跳转的连接 --&gt;</span><br><span class=\"line\">        &lt;property name=<span class=\"string\">\"successUrl\"</span> value=<span class=\"string\">\"/index.jsp\"</span> /&gt;</span><br><span class=\"line\">        &lt;!-- 权限不足，跳转路径  --&gt;</span><br><span class=\"line\">        &lt;property name=<span class=\"string\">\"unauthorizedUrl\"</span> value=<span class=\"string\">\"/unauthorized.jsp\"</span> /&gt;</span><br><span class=\"line\">        &lt;!-- shiro 连接约束配置 --&gt;</span><br><span class=\"line\">        &lt;!-- URL控制规则  路径=规则 --&gt;</span><br><span class=\"line\">        &lt;property name=<span class=\"string\">\"filterChainDefinitions\"</span>&gt;</span><br><span class=\"line\">            &lt;value&gt;</span><br><span class=\"line\">                /css/** = anon</span><br><span class=\"line\">                /demo/** = anon</span><br><span class=\"line\">                /images/** = anon</span><br><span class=\"line\">                /js/** = anon</span><br><span class=\"line\">                /json/** = anon</span><br><span class=\"line\">                /login.jsp** = anon</span><br><span class=\"line\">                /index.jsp** = authc</span><br><span class=\"line\">                /validatecode.jsp** = anon</span><br><span class=\"line\">                /user/userAction_login** = anon</span><br><span class=\"line\">                /user/userAction_validCheckCode** = anon</span><br><span class=\"line\">                /** = authc</span><br><span class=\"line\">                &lt;!--//  除了上述配置 其他资源必须需要身份认证 (登陆)--&gt;</span><br><span class=\"line\">            &lt;/value&gt;</span><br><span class=\"line\">        &lt;/property&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 安全管理器 --&gt;</span><br><span class=\"line\">    &lt;bean id=<span class=\"string\">\"securityManager\"</span></span><br><span class=\"line\">          class=<span class=\"string\">\"org.apache.shiro.web.mgt.DefaultWebSecurityManager\"</span>&gt;</span><br><span class=\"line\">        &lt;!-- 在安全管理器，应该注入 Realm 连接安全数据  --&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>到这里struts.xml的登录拦截就没用了。<br>而且这里按照之前的登录是登录不进去的，因为 Subject 和 Realm 都还没用创建。</p>\n<h4 id=\"shiro-Subject编写说明\"><a href=\"#shiro-Subject编写说明\" class=\"headerlink\" title=\"shiro_Subject编写说明\"></a>shiro_Subject编写说明</h4><p>由于使用了shiro所以原先的过滤器就没用了。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (input_checkcode.equalsIgnoreCase(session_code)) &#123;</span><br><span class=\"line\">\t\t\t\t/*// 验证码一样，需要门面类去调dao</span><br><span class=\"line\">\t\t\t\tUser existUser = serviceFacade.getUserService().login(model.getUsername(), model.getPassword());</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (existUser == null) &#123;</span><br><span class=\"line\">\t\t\t\t\t// 数据库没查到</span><br><span class=\"line\">\t\t\t\t\tthis.addActionError(this.getText(<span class=\"string\">\"login.usernameOrPassword.error\"</span>));</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">return</span> <span class=\"string\">\"login_error\"</span>;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t// 将用户信息保存到session中</span><br><span class=\"line\">\t\t\t\t\tsetSessionAttribute(<span class=\"string\">\"existUser\"</span>, existUser);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">return</span> <span class=\"string\">\"login_ok\"</span>;</span><br><span class=\"line\">\t\t\t\t&#125;*/</span><br><span class=\"line\">\t\t\t\t//shiro  Subject 接收表单数据 封装  令牌对象中</span><br><span class=\"line\">\t\t\t\t//1、获取subject</span><br><span class=\"line\">\t\t\t\tSubject subject=SecurityUtils.getSubject();</span><br></pre></td></tr></table></figure></p>\n<p>Subject 是一个接口，所以不能实例化对象。要通过SecurityUtils.getSubject();来获取。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Subject subject=SecurityUtils.getSubject();</span><br></pre></td></tr></table></figure></p>\n<p>Subject实体类只封装令牌不做数据访问，因此需要一个令牌实体。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UsernamePasswordToken usernamePasswordToken=new UsernamePasswordToken(model.getUsername(),model.getPassword());</span><br></pre></td></tr></table></figure></p>\n<p>登录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//2、登录  subject只封装令牌不做数据访问</span><br><span class=\"line\">\tsubject.login(usernamePasswordToken);  //login方法抛出异常  表示 登录身份失败 该方法没有异常认证成功</span><br></pre></td></tr></table></figure></p>\n<p>通过是否抛出异常来判断是否登录成功。为subject的login方法添加try/catch</p>\n<h4 id=\"shiro-realm认证编码说明\"><a href=\"#shiro-realm认证编码说明\" class=\"headerlink\" title=\"shiro_realm认证编码说明\"></a>shiro_realm认证编码说明</h4><p>Shiro是独立于web三层框架的。</p>\n<p>首先，需要编写一个 Realm 然后注入到 securityManager 中<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BosRealm extends AuthorizingRealm &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123;</span><br><span class=\"line\">        //授权管理</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"---授权管理---\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException &#123;</span><br><span class=\"line\">        //认证  realm  调用底层数据  和数据库比对  将bosrealm依赖注入安全管理器 SecurityManager</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"---认证---\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> null;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>注入到 securityManager<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=<span class=\"string\">\"bosRealm\"</span> class=<span class=\"string\">\"com.zero.bos.realm.BosRealm\"</span>&gt;&lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 安全管理器 --&gt;</span><br><span class=\"line\">&lt;bean id=<span class=\"string\">\"securityManager\"</span> class=<span class=\"string\">\"org.apache.shiro.web.mgt.DefaultWebSecurityManager\"</span>&gt;</span><br><span class=\"line\">    &lt;!-- 在安全管理器，应该注入 Realm 连接安全数据  --&gt;</span><br><span class=\"line\">    &lt;property name=<span class=\"string\">\"realm\"</span> value=<span class=\"string\">\"bosRealm\"</span>&gt;&lt;/property&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p>\n<p>doGetAuthorizationInfo :用于授权管理</p>\n<p>AuthenticationInfo ：登录认证</p>\n<p>realm的底层是 调用底层数据和数据库进行比对</p>\n<p>如果 doGetAuthenticationInfo 方法的返回值是NULL  那么就表示身份认证失败了  如果不为NULL 返回 AuthenticationInfo 表示认证成功</p>\n<p>参数 AuthenticationToken 令牌就是  Subject.login（令牌） 拿到令牌就有了表单账户密码</p>\n<p>拿到令牌之后，调用业务层的dao查询数据库  返回User对象，如果查询数据库对象是存在的就进行认证流程</p>\n<p>认证流程注重密码：（1）账户是要保证唯一性的 （2）密码是加密的 只能重置不能直接拿到密码 </p>\n<p>令牌里的密码  和 查询用户得到的密码 进行比对</p>\n<h4 id=\"shiro-realm认证编码实现\"><a href=\"#shiro-realm认证编码实现\" class=\"headerlink\" title=\"shiro_realm认证编码实现\"></a>shiro_realm认证编码实现</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public SimpleAuthenticationInfo(Object principal, Object credentials, String realmName) &#123;</span><br><span class=\"line\">    this.principals = new SimplePrincipalCollection(principal, realmName);</span><br><span class=\"line\">    this.credentials = credentials;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>BosRealm代码<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UsernamePasswordToken userToken=(UsernamePasswordToken) token; //拿到密码和用户名</span><br><span class=\"line\"></span><br><span class=\"line\">        String username=userToken.getUsername(); //通过账户拿密码</span><br><span class=\"line\">        //2、查询数据库</span><br><span class=\"line\">        User existUser= serviceFacade.getUserService().findUserByUsername(username);</span><br><span class=\"line\">        //进行判断</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (existUser==null)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> null;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            //比对密码 AuthenticationInfo 对象 有三个参数 1、当前登录的用户信息  为后续获取用户信息准备</span><br><span class=\"line\">            // 仅仅是为Subject提供信息不做比对 令牌才是比对</span><br><span class=\"line\">            //参数2、数据库里面的真实密码   底层自动和令牌的密码比对 如果错误info是空值</span><br><span class=\"line\">            //参数3：当前realm 在容器中 bean 的 id值  一般用方法拿而不是固定的名称</span><br><span class=\"line\">            SimpleAuthenticationInfo info=new SimpleAuthenticationInfo(existUser,existUser.getPassword(),super.getName());</span><br><span class=\"line\">            <span class=\"built_in\">return</span> info;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p>过程</p>\n<ol>\n<li>首先通过传递过来的token拿到账户</li>\n<li>通过账户去查询是否存在有这个账户的对象</li>\n<li>拿到对象后进行对比密码<br>SimpleAuthenticationInfo的三个参数：（1）当前登录的用户信息,仅仅为Subject提供数据，不做比对  （2）数据库里面的真实密码  （3）当前realm在容器中 bean 的id值，一般用方法获取而不是固定的”BosRealm”</li>\n</ol>\n<p>认证只走一次，Realm这个方法。</p>\n<p>如果密码错误后台会报错：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.apache.shiro.authc.UnknownAccountException    //账户错误</span><br><span class=\"line\">org.apache.shiro.authc.IncorrectCredentialsException  //密码错误</span><br></pre></td></tr></table></figure>\n<p>提升用户体验度<br>在UserAction中添加代码<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UsernamePasswordToken token=new UsernamePasswordToken(model.getUsername(),model.getPassword());</span><br><span class=\"line\"></span><br><span class=\"line\">//2、登录  subject只封装令牌不做数据访问</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">\tsubject.login(token);  //login方法抛出异常  表示 登录身份失败 该方法没有异常认证成功</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> <span class=\"string\">\"login_ok\"</span>;</span><br><span class=\"line\">&#125; catch (UnknownAccountException e) &#123;</span><br><span class=\"line\">\te.printStackTrace();</span><br><span class=\"line\">\tthis.addActionError(this.getText(<span class=\"string\">\"login.username.error\"</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> <span class=\"string\">\"login_error\"</span>;</span><br><span class=\"line\">&#125;catch (IncorrectCredentialsException e) &#123;</span><br><span class=\"line\">\te.printStackTrace();</span><br><span class=\"line\">\tthis.addActionError(this.getText(<span class=\"string\">\"login.password.error\"</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> <span class=\"string\">\"login_error\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>国际化<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">login.username.error=账户不存在</span><br><span class=\"line\">login.password.error=密码错误</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"shiro认证页面显示客户信息以及退出系统\"><a href=\"#shiro认证页面显示客户信息以及退出系统\" class=\"headerlink\" title=\"shiro认证页面显示客户信息以及退出系统\"></a>shiro认证页面显示客户信息以及退出系统</h4><p>因为这个时候不再使用底层的session了。所以不显示本地的IP</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"sessionInfoDiv\"</span></span><br><span class=\"line\">   style=<span class=\"string\">\"position: absolute;right: 5px;top:10px;\"</span>&gt;</span><br><span class=\"line\">   [&lt;strong&gt;超级管理员&lt;/strong&gt;]，欢迎你$&#123;sessionScope.existUser.username&#125;!</span><br><span class=\"line\">   您使用[&lt;strong&gt;$&#123;pageContext.request.remoteAddr&#125;&lt;/strong&gt;]IP登录！</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<p>使用shiro标签库来获取</p>\n<ul>\n<li>引入标签库</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ taglib prefix=<span class=\"string\">\"shiro\"</span> uri=<span class=\"string\">\"http://shiro.apache.org/tags\"</span> %&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>通过标签获取用户名</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"sessionInfoDiv\"</span></span><br><span class=\"line\">   style=<span class=\"string\">\"position: absolute;right: 5px;top:10px;\"</span>&gt;</span><br><span class=\"line\">   [&lt;strong&gt;超级管理员&lt;/strong&gt;]，欢迎你&lt;shiro:principal property=<span class=\"string\">\"username\"</span>&gt;&lt;/shiro:principal&gt;!</span><br><span class=\"line\">   您使用[&lt;strong&gt;$&#123;pageContext.request.remoteAddr&#125;&lt;/strong&gt;]IP登录！</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>退出登录修改</p>\n<p><strong>原来的代码</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 退出登录</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logoutFun</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   $.messager</span><br><span class=\"line\">   .confirm(<span class=\"string\">'系统提示'</span>,<span class=\"string\">'您确定要退出本次登录吗?'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">isConfirm</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isConfirm) &#123;</span><br><span class=\"line\">         location.href = <span class=\"string\">'$&#123;pageContext.request.contextPath &#125;/login.jsp'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>改为</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 退出登录</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logoutFun</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   $.messager</span><br><span class=\"line\">   .confirm(<span class=\"string\">'系统提示'</span>,<span class=\"string\">'您确定要退出本次登录吗?'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">isConfirm</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isConfirm) &#123;</span><br><span class=\"line\">         location.href = <span class=\"string\">'$&#123;pageContext.request.contextPath &#125;/user/userAction_logout'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"shiro授权临时数据录入\"><a href=\"#shiro授权临时数据录入\" class=\"headerlink\" title=\"shiro授权临时数据录入\"></a>shiro授权临时数据录入</h4><ol>\n<li>首先模拟一下权限不足的场景</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/page_base_region** = roles[<span class=\"string\">\"base\"</span>]  &lt;!--需要有base这个角色才能访问这个路径 --&gt;</span><br></pre></td></tr></table></figure>\n<p>上面这行代码表示  需要有base这个角色才可以访问这个路径</p>\n<p>在 struts.xml中</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 需要进行权限控制的页面访问 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"page_*_*\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">type</span>=<span class=\"string\">\"dispatcher\"</span>&gt;</span>/WEB-INF/pages/&#123;1&#125;/&#123;2&#125;.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>那么这个时候，region页面放就访问不了了。</p>\n<p><img src=\"https://github.com/whyathere/tuchuang/blob/master/Shiro/unauthorized.jpg?raw=true\" alt=\"\"></p>\n<p>当当前用户没有角色或者权限的时候就会向这里跳转</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 权限不足，跳转路径  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"unauthorizedUrl\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"/unauthorized.jsp\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>思路：根据用户，查找到用户的ID，然后通过ID去查用户角色表</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SimpleAuthorizationInfo <span class=\"comment\">//实现类  提供 addRole（String） 角色 addStringPemission（String）权限</span></span><br></pre></td></tr></table></figure>\n<p>根据登录用户，查询 该用户具有的角色 拿到角色表设计code 值 添加到 该对象集合中/获取权限code 添加该对象 对象集合中</p>\n<p>addRole（String） 里的String 和xml文件中 roles[“base”]   的base进行比较</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> AuthorizationInfo <span class=\"title\">doGetAuthorizationInfo</span><span class=\"params\">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//AuthorizationInfo 授权管理 授权实现：根据当前登录用户  获取用户id  查询该用户在数据库表中  具有哪些角色 或者权限</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"---授权---\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//1号 jack 1 角色 code：base 可以访问  region 资源</span></span><br><span class=\"line\">    <span class=\"comment\">//2 号 rose 2角色 code：qupai 不可以访问 region 资源</span></span><br><span class=\"line\">    SimpleAuthorizationInfo info = <span class=\"keyword\">new</span> SimpleAuthorizationInfo();</span><br><span class=\"line\">    Subject subject = SecurityUtils.getSubject();</span><br><span class=\"line\">    User existUser = (User)subject.getPrincipal();</span><br><span class=\"line\">    <span class=\"comment\">//系统  超级管理员 和登录用户 账户是唯一的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">\"tom\"</span>.equals(existUser.getUsername()))&#123;</span><br><span class=\"line\">        <span class=\"comment\">//将系统中所有的角色关键字 code 和所有的权限 code 都添加 Info</span></span><br><span class=\"line\">        List&lt;Role&gt; roles=facadeService.getRoleService().findAllRoles();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Role role:roles)&#123;</span><br><span class=\"line\">            info.addRole(role.getCode()); <span class=\"comment\">//具有所有角色的关键字</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        List&lt;Function&gt; functions=facadeService.getFunctionService().findAllFunctions();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Function function:functions)&#123;</span><br><span class=\"line\">            info.addStringPermission(function.getCode());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//登录用户具有权限  根据当前登录用户 id  查询 该用户具有角色 以及 每个对应角色 对应权限</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> info;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建RoleService、FunctionService、Impl以及Dao</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subject.getPrincipal()  <span class=\"comment\">//获取对象</span></span><br></pre></td></tr></table></figure>\n<p>判断用户名是否是”tom”.如果是的话就把所有的权限和用户关键字给到tom。</p>\n<p>返回info</p>\n<h4 id=\"shiro授权之非超级管理员权限realm实现\"><a href=\"#shiro授权之非超级管理员权限realm实现\" class=\"headerlink\" title=\"shiro授权之非超级管理员权限realm实现\"></a>shiro授权之非超级管理员权限realm实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> AuthorizationInfo <span class=\"title\">doGetAuthorizationInfo</span><span class=\"params\">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//AuthorizationInfo 授权管理 授权实现：根据当前登录用户  获取用户id  查询该用户在数据库表中  具有哪些角色 或者权限</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"---授权---\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//1号 jack 1 角色 code：base 可以访问  region 资源</span></span><br><span class=\"line\">    <span class=\"comment\">//2 号 rose 2角色 code：qupai 不可以访问 region 资源</span></span><br><span class=\"line\">    SimpleAuthorizationInfo info = <span class=\"keyword\">new</span> SimpleAuthorizationInfo();</span><br><span class=\"line\">    Subject subject = SecurityUtils.getSubject();</span><br><span class=\"line\">    User existUser = (User) subject.getPrincipal();</span><br><span class=\"line\">    <span class=\"comment\">//系统  超级管理员 和登录用户 账户是唯一的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">\"tom\"</span>.equals(existUser.getUsername())) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//将系统中所有的角色关键字 code 和所有的权限 code 都添加 Info</span></span><br><span class=\"line\">        List&lt;Role&gt; roles = facadeService.getRoleService().findAllRoles();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Role role : roles) &#123;</span><br><span class=\"line\">            info.addRole(role.getCode()); <span class=\"comment\">//具有所有角色的关键字</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        List&lt;Function&gt; functions = facadeService.getFunctionService().findAllFunctions();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Function function : functions) &#123;</span><br><span class=\"line\">            info.addStringPermission(function.getCode());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//登录用户具有权限  根据当前登录用户 id  查询 该用户具有角色 以及 每个对应角色 对应权限</span></span><br><span class=\"line\">        List&lt;Role&gt; roles = facadeService.getRoleService().findAllRolesByUserId(existUser.getId());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Role role : roles) &#123;</span><br><span class=\"line\">            info.addRole(role.getCode());</span><br><span class=\"line\">            Set&lt;Function&gt; functions = role.getFunctions();  <span class=\"comment\">//每一个角色对应多个权限</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Function function : functions) &#123;</span><br><span class=\"line\">                info.addStringPermission(function.getCode());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> info;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//角色 role user_role 对象连接</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">RoleDao</span> <span class=\"keyword\">extends</span> <span class=\"title\">JpaRepository</span>&lt;<span class=\"title\">Role</span>,<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Query</span>(<span class=\"string\">\"from Role r inner join r.users u where u.id = ?1\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Role&gt; <span class=\"title\">findAllRolesByUserId</span><span class=\"params\">(String id)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>Query语句说明：内连接，需要Role和 中间表（user_role）都存在，join r.users就连接上了。然后查找u.id 因为在user_role 有user也有role。</p>\n<p>对于jpa来说，它做多变关系连接的时候，它有一个叫做迫切内连接和非迫切内连接。同样的也有迫切外连接和非迫切外连接。</p>\n<p><strong>区别</strong>：</p>\n<ul>\n<li><strong>非迫切内连接 ：</strong> 封装的结果集是Object[]。查的 时候并不是封装到List<role> 而是 List&lt;Object[]&gt;而Object数组内部有两个元素，一个是Role一个是Role的关联Function</role></li>\n<li><strong>迫切内连接 ：</strong>查询的结果集  封装单一的对象里面，在对象的内部引入了关联的集合。Function</li>\n</ul>\n<p>如果想封装到单一的Role中，就需要用迫切。就必须要用关键字fetch，非迫切就不需要fetch。</p>\n<p>而我们的数据结果集是要封装到Role中的要加fetch</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Query</span>(<span class=\"string\">\"from Role r inner join fetch r.users u where u.id = ?1\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Role&gt; <span class=\"title\">findAllRolesByUserId</span><span class=\"params\">(String id)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>这样Jpa会强制把结果集封装到单一的对象里去。</p>\n<p>如果不加fetch会放到一个Object集合中，第一个元素是Role第二个是Function集合</p>\n<p>这里泛型是和from后面跟的对象一致的</p>\n<p>这里就可以看出code关键字是base的可以访问“区域”页面。而没有这个关键字的不能访问。</p>\n<h4 id=\"shiro注解权限控制配置说明\"><a href=\"#shiro注解权限控制配置说明\" class=\"headerlink\" title=\"shiro注解权限控制配置说明\"></a>shiro注解权限控制配置说明</h4><p>目前想要访问region页面必须角色有这个的关键字”base”，现在jack 和tom 有，而rose没有</p>\n<p><img src=\"https://github.com/whyathere/tuchuang/blob/master/Shiro/%E8%A7%92%E8%89%B2%E6%88%AA%E5%9B%BE.jpg?raw=true\" alt=\"\"></p>\n<p>rose是不能查询取派员的。</p>\n<p>方法级别只需要添加一个注解就可以给到这个权限了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 取派员分页查询</span></span><br><span class=\"line\"><span class=\"meta\">@Action</span>(value = <span class=\"string\">\"staffAction_pageQuery\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@RequiresRoles</span>(value = <span class=\"string\">\"base\"</span>)  <span class=\"comment\">//访问这个资源就需要有base权限</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">pageQuery</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   Map&lt;String,Object&gt; data=<span class=\"keyword\">new</span> HashMap&lt;String,Object&gt;();</span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      Page &lt;Staff&gt; pageData=serviceFacade.getStaffService().pageQuery(getPageRequest());</span><br><span class=\"line\">      setPageData(pageData); <span class=\"comment\">//提供给父类</span></span><br><span class=\"line\">      <span class=\"comment\">//dao  参数   Pageable pageable   自动完成分页查询   将分页结果数据   自动封装到Page&lt;T&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">//从Page  对象获取总记录数  和   每页分页记录数List&lt;Staff&gt;</span></span><br><span class=\"line\">   &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">      e.printStackTrace();</span><br><span class=\"line\">      push(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"string\">\"pageQuery\"</span>;  <span class=\"comment\">//走全局结果集</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>@RequiresRoles(value = “base”)   //访问这个资源就需要有base权限</p>\n<p><strong>注解方式原理：</strong></p>\n<p>首先目前就算加上注解还是不能用的。</p>\n<p>shiro 注解原理：注解信息是通过反射来读的</p>\n<p>涉及到动态代理：代理类对目标类方法进行加强。  方法是：pageQuery。采用了Spring 的aop来实现的。</p>\n<p>aop：面向接口代理</p>\n<p>​    代理类 $proxy。。和 目标类  StaffAction 的关系：</p>\n<p>​    兄弟关系    都属于接口实现类</p>\n<p>代理类：面向目标类代理</p>\n<p>代理类和目标类  是 父子关系</p>\n<p>代理类是目标类  StaffAction 子类</p>\n<p>默认向  StaffAction  接口做代理类  ，shiro注解的代理类是向接口做代理</p>\n<p>shiro注解配置权限需要：</p>\n<ol>\n<li>开启注解配置aop</li>\n<li>目标方法上添加注解即可</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--使用注解完成 权限管理  启用注解 需要配置3个bean--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- spring bean 对象后处理器  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"lifecycleBeanPostProcessor\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.shiro.spring.LifecycleBeanPostProcessor\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 切面自动代理 bean生成注解代理类实现者 修改代理类生成策略 面向接口 默认面向接口代理 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">depends-on</span>=<span class=\"string\">\"lifecycleBeanPostProcessor\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 切面 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"securityManager\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"securityManager\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这个时候取派员页面，tom可以正常访问显示。jack报错。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">42</span>:<span class=\"number\">00</span>,<span class=\"number\">780</span> ERROR Dispatcher:<span class=\"number\">38</span> - Exception occurred during processing request: com.sun.proxy.$Proxy58.pageQuery()</span><br><span class=\"line\"></span><br><span class=\"line\">java.lang.NoSuchMethodException: com.sun.proxy.$Proxy58.pageQuery()</span><br></pre></td></tr></table></figure>\n<p>原因：默认是面向接口做代理，当前类有接口。但是当前类的接口没有pageQuery方法。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 切面自动代理 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">depends-on</span>=<span class=\"string\">\"lifecycleBeanPostProcessor\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这个bean负责生成代理类。</p>\n<p>改为</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 切面自动代理 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">depends-on</span>=<span class=\"string\">\"lifecycleBeanPostProcessor\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"proxyTargetClass\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样就从面向接口变为面向类</p>\n<p>这个时候还是木有啊！！</p>\n<p>新的异常</p>\n<p><img src=\"https://github.com/whyathere/tuchuang/blob/master/Shiro/shiro%E5%BC%82%E5%B8%B8.jpg?raw=true\" alt=\"\"></p>\n<p>这里是报的父类的错，这说明类型不一样。</p>\n<p>父类获取子类参数化泛型  父类可以获取到  staff  可以进行实例化。</p>\n<p>BaseAction无法获取代理类泛型！</p>\n<p>默认是Object类型</p>\n<p>原因：代理类没有泛型，代理类是动态生成的。泛型在编译的时候有效，运行的时候就没有了。</p>\n<p>泛型的作用周期是编译期，运行的时候所有的泛型就都消失了。</p>\n<p>解决方法，不要从代理类去找。去父类找</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 目的 获取子类参数化类型</span></span><br><span class=\"line\"><span class=\"comment\">// 父类构造方法中 使用 参数化泛型+反射 获取子类具体泛型对应类型 newInstance 创建实例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseAction</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对model进行实例化， 通过子类 类声明的泛型</span></span><br><span class=\"line\">    Type superclass = <span class=\"keyword\">this</span>.getClass().getGenericSuperclass();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(superclass <span class=\"keyword\">instanceof</span> ParameterizedType))&#123;</span><br><span class=\"line\">        <span class=\"comment\">//没有代理类</span></span><br><span class=\"line\">      superclass =  <span class=\"keyword\">this</span>.getClass().getSuperclass().getGenericSuperclass();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 转化为参数化类型</span></span><br><span class=\"line\">    ParameterizedType parameterizedType = (ParameterizedType) superclass;</span><br><span class=\"line\">    <span class=\"comment\">// 获取一个泛型参数</span></span><br><span class=\"line\">    Class&lt;T&gt; modelClass = (Class&lt;T&gt;) parameterizedType.getActualTypeArguments()[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        model = modelClass.newInstance();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这次报了空指针异常</p>\n<p>java.lang.NullPointerException</p>\n<p>原因：在FacadeService中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"comment\">// 注入 业务层实例</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> StaffService staffService;</span><br></pre></td></tr></table></figure>\n<p>这个注解没有将接口实例注入给接口</p>\n<p><img src=\"https://github.com/whyathere/tuchuang/blob/master/Shiro/%E5%8E%9F%E5%9B%A0.jpg?raw=true\" alt=\"\"></p>\n<p>就是代理类没有继承@Autowried注解</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--更改默认配置文件信息--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.objectFactory.spring.autoWire.alwaysRespect\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在struts.xml中添加这个</p>\n<p>让代理类可以继承AutoWired注解</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"shiro\"><a href=\"#shiro\" class=\"headerlink\" title=\"shiro\"></a>shiro</h3><h4 id=\"权限表设计原理说明\"><a href=\"#权限表设计原理说明\" class=\"headerlink\" title=\"权限表设计原理说明\"></a>权限表设计原理说明</h4><p>首先，当用户访问没有地址时。根据用户请求资源路径–&gt;查询数据库–&gt;权限表（有无该访问的路径，如果有…doFilter放行）</p>\n<p>要根据登录用户，拿到用户的id–&gt;多表查询–&gt;functions权限表      如果有这个路径就允许访问</p>\n<p>分为用户表、角色表、权限表</p>\n<p>用户和角色表是多对多的关系。</p>\n<p>在User对象中有</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private Set&lt;Role&gt; roles = new HashSet&lt;Role&gt;(0);</span><br></pre></td></tr></table></figure>\n<p>之后，给用户添加权限就相当于往用户的这个集合中添加Role。操作集合的增删改查就相当于操作中间表的增删改差</p>\n<p>但是有一个前提，在修改的时候User必须是一个持久态。底层原理还是快照！！</p>\n<h4 id=\"shiro和spring整合\"><a href=\"#shiro和spring整合\" class=\"headerlink\" title=\"shiro和spring整合\"></a>shiro和spring整合</h4><ol>\n<li><p>将maven依赖导入到domain层</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;shiro-all&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;<span class=\"variable\">$&#123;shiro.version&#125;</span>&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在web.xml中添加shiro  filter</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 权限控制 Filter  放到 struts2前端控制器前面 --&gt;</span><br><span class=\"line\">&lt;!-- shiro security filter --&gt;</span><br><span class=\"line\">&lt;filter&gt;</span><br><span class=\"line\">    &lt;!-- 这里的 filter-name 要和 spring 的 applicationContext-shiro.xml 里的 org.apache.shiro.spring.web.ShiroFilterFactoryBean</span><br><span class=\"line\">        的 bean name 相同 --&gt;</span><br><span class=\"line\">    &lt;filter-name&gt;shiroSecurityFilter&lt;/filter-name&gt;</span><br><span class=\"line\">    &lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt;</span><br><span class=\"line\">    &lt;init-param&gt;</span><br><span class=\"line\">        &lt;param-name&gt;targetFilterLifecycle&lt;/param-name&gt;</span><br><span class=\"line\">        &lt;param-value&gt;<span class=\"literal\">true</span>&lt;/param-value&gt;</span><br><span class=\"line\">    &lt;/init-param&gt;</span><br><span class=\"line\">&lt;/filter&gt;</span><br><span class=\"line\">&lt;filter-mapping&gt;</span><br><span class=\"line\">    &lt;filter-name&gt;shiroSecurityFilter&lt;/filter-name&gt;</span><br><span class=\"line\">    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class=\"line\">&lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这个Filter是spring提供，DelegationFilterProxy是代理Filter（会自动找 和”&lt;”filter-name&gt;”同名的bean&gt;对象）</p>\n<ol start=\"3\">\n<li>在domain中创建applicationContext-shiro.xml<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span>?&gt;</span><br><span class=\"line\">&lt;beans xmlns=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span><br><span class=\"line\">       xmlns:xsi=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span><br><span class=\"line\">       xsi:schemaLocation=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span><br><span class=\"line\"><span class=\"string\">\thttp://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class=\"line\"><span class=\"string\">\"</span>&gt;</span><br><span class=\"line\">    &lt;!--shiro认证和权限配置--&gt;</span><br><span class=\"line\">    &lt;!-- shiro 权限控制 --&gt;</span><br><span class=\"line\">    &lt;bean id=<span class=\"string\">\"shiroSecurityFilter\"</span> class=<span class=\"string\">\"org.apache.shiro.spring.web.ShiroFilterFactoryBean\"</span>&gt;</span><br><span class=\"line\">        &lt;!-- shiro 的核心安全接口 --&gt;</span><br><span class=\"line\">        &lt;property name=<span class=\"string\">\"securityManager\"</span> ref=<span class=\"string\">\"securityManager\"</span> /&gt;</span><br><span class=\"line\">        &lt;!-- 要求登录时的链接 --&gt;</span><br><span class=\"line\">        &lt;property name=<span class=\"string\">\"loginUrl\"</span> value=<span class=\"string\">\"/login.jsp\"</span> /&gt;</span><br><span class=\"line\">        &lt;!-- 登陆成功后要跳转的连接 --&gt;</span><br><span class=\"line\">        &lt;property name=<span class=\"string\">\"successUrl\"</span> value=<span class=\"string\">\"/index.jsp\"</span> /&gt;</span><br><span class=\"line\">        &lt;!-- 权限不足，跳转路径  --&gt;</span><br><span class=\"line\">        &lt;property name=<span class=\"string\">\"unauthorizedUrl\"</span> value=<span class=\"string\">\"/unauthorized.jsp\"</span> /&gt;</span><br><span class=\"line\">        &lt;!-- shiro 连接约束配置 --&gt;</span><br><span class=\"line\">        &lt;!-- URL控制规则  路径=规则 --&gt;</span><br><span class=\"line\">        &lt;property name=<span class=\"string\">\"filterChainDefinitions\"</span>&gt;</span><br><span class=\"line\">            &lt;value&gt;</span><br><span class=\"line\">                /css/** = anon</span><br><span class=\"line\">                /demo/** = anon</span><br><span class=\"line\">                /images/** = anon</span><br><span class=\"line\">                /js/** = anon</span><br><span class=\"line\">                /json/** = anon</span><br><span class=\"line\">                /login.jsp** = anon</span><br><span class=\"line\">                /index.jsp** = authc</span><br><span class=\"line\">                /validatecode.jsp** = anon</span><br><span class=\"line\">                /user/userAction_login** = anon</span><br><span class=\"line\">                /user/userAction_validCheckCode** = anon</span><br><span class=\"line\">                /** = authc</span><br><span class=\"line\">                &lt;!--//  除了上述配置 其他资源必须需要身份认证 (登陆)--&gt;</span><br><span class=\"line\">            &lt;/value&gt;</span><br><span class=\"line\">        &lt;/property&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 安全管理器 --&gt;</span><br><span class=\"line\">    &lt;bean id=<span class=\"string\">\"securityManager\"</span></span><br><span class=\"line\">          class=<span class=\"string\">\"org.apache.shiro.web.mgt.DefaultWebSecurityManager\"</span>&gt;</span><br><span class=\"line\">        &lt;!-- 在安全管理器，应该注入 Realm 连接安全数据  --&gt;</span><br><span class=\"line\">    &lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>到这里struts.xml的登录拦截就没用了。<br>而且这里按照之前的登录是登录不进去的，因为 Subject 和 Realm 都还没用创建。</p>\n<h4 id=\"shiro-Subject编写说明\"><a href=\"#shiro-Subject编写说明\" class=\"headerlink\" title=\"shiro_Subject编写说明\"></a>shiro_Subject编写说明</h4><p>由于使用了shiro所以原先的过滤器就没用了。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (input_checkcode.equalsIgnoreCase(session_code)) &#123;</span><br><span class=\"line\">\t\t\t\t/*// 验证码一样，需要门面类去调dao</span><br><span class=\"line\">\t\t\t\tUser existUser = serviceFacade.getUserService().login(model.getUsername(), model.getPassword());</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (existUser == null) &#123;</span><br><span class=\"line\">\t\t\t\t\t// 数据库没查到</span><br><span class=\"line\">\t\t\t\t\tthis.addActionError(this.getText(<span class=\"string\">\"login.usernameOrPassword.error\"</span>));</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">return</span> <span class=\"string\">\"login_error\"</span>;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t// 将用户信息保存到session中</span><br><span class=\"line\">\t\t\t\t\tsetSessionAttribute(<span class=\"string\">\"existUser\"</span>, existUser);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">return</span> <span class=\"string\">\"login_ok\"</span>;</span><br><span class=\"line\">\t\t\t\t&#125;*/</span><br><span class=\"line\">\t\t\t\t//shiro  Subject 接收表单数据 封装  令牌对象中</span><br><span class=\"line\">\t\t\t\t//1、获取subject</span><br><span class=\"line\">\t\t\t\tSubject subject=SecurityUtils.getSubject();</span><br></pre></td></tr></table></figure></p>\n<p>Subject 是一个接口，所以不能实例化对象。要通过SecurityUtils.getSubject();来获取。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Subject subject=SecurityUtils.getSubject();</span><br></pre></td></tr></table></figure></p>\n<p>Subject实体类只封装令牌不做数据访问，因此需要一个令牌实体。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UsernamePasswordToken usernamePasswordToken=new UsernamePasswordToken(model.getUsername(),model.getPassword());</span><br></pre></td></tr></table></figure></p>\n<p>登录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//2、登录  subject只封装令牌不做数据访问</span><br><span class=\"line\">\tsubject.login(usernamePasswordToken);  //login方法抛出异常  表示 登录身份失败 该方法没有异常认证成功</span><br></pre></td></tr></table></figure></p>\n<p>通过是否抛出异常来判断是否登录成功。为subject的login方法添加try/catch</p>\n<h4 id=\"shiro-realm认证编码说明\"><a href=\"#shiro-realm认证编码说明\" class=\"headerlink\" title=\"shiro_realm认证编码说明\"></a>shiro_realm认证编码说明</h4><p>Shiro是独立于web三层框架的。</p>\n<p>首先，需要编写一个 Realm 然后注入到 securityManager 中<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BosRealm extends AuthorizingRealm &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123;</span><br><span class=\"line\">        //授权管理</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"---授权管理---\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException &#123;</span><br><span class=\"line\">        //认证  realm  调用底层数据  和数据库比对  将bosrealm依赖注入安全管理器 SecurityManager</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"---认证---\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">return</span> null;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>注入到 securityManager<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=<span class=\"string\">\"bosRealm\"</span> class=<span class=\"string\">\"com.zero.bos.realm.BosRealm\"</span>&gt;&lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 安全管理器 --&gt;</span><br><span class=\"line\">&lt;bean id=<span class=\"string\">\"securityManager\"</span> class=<span class=\"string\">\"org.apache.shiro.web.mgt.DefaultWebSecurityManager\"</span>&gt;</span><br><span class=\"line\">    &lt;!-- 在安全管理器，应该注入 Realm 连接安全数据  --&gt;</span><br><span class=\"line\">    &lt;property name=<span class=\"string\">\"realm\"</span> value=<span class=\"string\">\"bosRealm\"</span>&gt;&lt;/property&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p>\n<p>doGetAuthorizationInfo :用于授权管理</p>\n<p>AuthenticationInfo ：登录认证</p>\n<p>realm的底层是 调用底层数据和数据库进行比对</p>\n<p>如果 doGetAuthenticationInfo 方法的返回值是NULL  那么就表示身份认证失败了  如果不为NULL 返回 AuthenticationInfo 表示认证成功</p>\n<p>参数 AuthenticationToken 令牌就是  Subject.login（令牌） 拿到令牌就有了表单账户密码</p>\n<p>拿到令牌之后，调用业务层的dao查询数据库  返回User对象，如果查询数据库对象是存在的就进行认证流程</p>\n<p>认证流程注重密码：（1）账户是要保证唯一性的 （2）密码是加密的 只能重置不能直接拿到密码 </p>\n<p>令牌里的密码  和 查询用户得到的密码 进行比对</p>\n<h4 id=\"shiro-realm认证编码实现\"><a href=\"#shiro-realm认证编码实现\" class=\"headerlink\" title=\"shiro_realm认证编码实现\"></a>shiro_realm认证编码实现</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public SimpleAuthenticationInfo(Object principal, Object credentials, String realmName) &#123;</span><br><span class=\"line\">    this.principals = new SimplePrincipalCollection(principal, realmName);</span><br><span class=\"line\">    this.credentials = credentials;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>BosRealm代码<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UsernamePasswordToken userToken=(UsernamePasswordToken) token; //拿到密码和用户名</span><br><span class=\"line\"></span><br><span class=\"line\">        String username=userToken.getUsername(); //通过账户拿密码</span><br><span class=\"line\">        //2、查询数据库</span><br><span class=\"line\">        User existUser= serviceFacade.getUserService().findUserByUsername(username);</span><br><span class=\"line\">        //进行判断</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (existUser==null)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> null;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            //比对密码 AuthenticationInfo 对象 有三个参数 1、当前登录的用户信息  为后续获取用户信息准备</span><br><span class=\"line\">            // 仅仅是为Subject提供信息不做比对 令牌才是比对</span><br><span class=\"line\">            //参数2、数据库里面的真实密码   底层自动和令牌的密码比对 如果错误info是空值</span><br><span class=\"line\">            //参数3：当前realm 在容器中 bean 的 id值  一般用方法拿而不是固定的名称</span><br><span class=\"line\">            SimpleAuthenticationInfo info=new SimpleAuthenticationInfo(existUser,existUser.getPassword(),super.getName());</span><br><span class=\"line\">            <span class=\"built_in\">return</span> info;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p>过程</p>\n<ol>\n<li>首先通过传递过来的token拿到账户</li>\n<li>通过账户去查询是否存在有这个账户的对象</li>\n<li>拿到对象后进行对比密码<br>SimpleAuthenticationInfo的三个参数：（1）当前登录的用户信息,仅仅为Subject提供数据，不做比对  （2）数据库里面的真实密码  （3）当前realm在容器中 bean 的id值，一般用方法获取而不是固定的”BosRealm”</li>\n</ol>\n<p>认证只走一次，Realm这个方法。</p>\n<p>如果密码错误后台会报错：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.apache.shiro.authc.UnknownAccountException    //账户错误</span><br><span class=\"line\">org.apache.shiro.authc.IncorrectCredentialsException  //密码错误</span><br></pre></td></tr></table></figure>\n<p>提升用户体验度<br>在UserAction中添加代码<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UsernamePasswordToken token=new UsernamePasswordToken(model.getUsername(),model.getPassword());</span><br><span class=\"line\"></span><br><span class=\"line\">//2、登录  subject只封装令牌不做数据访问</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">\tsubject.login(token);  //login方法抛出异常  表示 登录身份失败 该方法没有异常认证成功</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> <span class=\"string\">\"login_ok\"</span>;</span><br><span class=\"line\">&#125; catch (UnknownAccountException e) &#123;</span><br><span class=\"line\">\te.printStackTrace();</span><br><span class=\"line\">\tthis.addActionError(this.getText(<span class=\"string\">\"login.username.error\"</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> <span class=\"string\">\"login_error\"</span>;</span><br><span class=\"line\">&#125;catch (IncorrectCredentialsException e) &#123;</span><br><span class=\"line\">\te.printStackTrace();</span><br><span class=\"line\">\tthis.addActionError(this.getText(<span class=\"string\">\"login.password.error\"</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> <span class=\"string\">\"login_error\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>国际化<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">login.username.error=账户不存在</span><br><span class=\"line\">login.password.error=密码错误</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"shiro认证页面显示客户信息以及退出系统\"><a href=\"#shiro认证页面显示客户信息以及退出系统\" class=\"headerlink\" title=\"shiro认证页面显示客户信息以及退出系统\"></a>shiro认证页面显示客户信息以及退出系统</h4><p>因为这个时候不再使用底层的session了。所以不显示本地的IP</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"sessionInfoDiv\"</span></span><br><span class=\"line\">   style=<span class=\"string\">\"position: absolute;right: 5px;top:10px;\"</span>&gt;</span><br><span class=\"line\">   [&lt;strong&gt;超级管理员&lt;/strong&gt;]，欢迎你$&#123;sessionScope.existUser.username&#125;!</span><br><span class=\"line\">   您使用[&lt;strong&gt;$&#123;pageContext.request.remoteAddr&#125;&lt;/strong&gt;]IP登录！</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<p>使用shiro标签库来获取</p>\n<ul>\n<li>引入标签库</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ taglib prefix=<span class=\"string\">\"shiro\"</span> uri=<span class=\"string\">\"http://shiro.apache.org/tags\"</span> %&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>通过标签获取用户名</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"sessionInfoDiv\"</span></span><br><span class=\"line\">   style=<span class=\"string\">\"position: absolute;right: 5px;top:10px;\"</span>&gt;</span><br><span class=\"line\">   [&lt;strong&gt;超级管理员&lt;/strong&gt;]，欢迎你&lt;shiro:principal property=<span class=\"string\">\"username\"</span>&gt;&lt;/shiro:principal&gt;!</span><br><span class=\"line\">   您使用[&lt;strong&gt;$&#123;pageContext.request.remoteAddr&#125;&lt;/strong&gt;]IP登录！</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>退出登录修改</p>\n<p><strong>原来的代码</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 退出登录</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logoutFun</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   $.messager</span><br><span class=\"line\">   .confirm(<span class=\"string\">'系统提示'</span>,<span class=\"string\">'您确定要退出本次登录吗?'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">isConfirm</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isConfirm) &#123;</span><br><span class=\"line\">         location.href = <span class=\"string\">'$&#123;pageContext.request.contextPath &#125;/login.jsp'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>改为</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 退出登录</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logoutFun</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   $.messager</span><br><span class=\"line\">   .confirm(<span class=\"string\">'系统提示'</span>,<span class=\"string\">'您确定要退出本次登录吗?'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">isConfirm</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isConfirm) &#123;</span><br><span class=\"line\">         location.href = <span class=\"string\">'$&#123;pageContext.request.contextPath &#125;/user/userAction_logout'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"shiro授权临时数据录入\"><a href=\"#shiro授权临时数据录入\" class=\"headerlink\" title=\"shiro授权临时数据录入\"></a>shiro授权临时数据录入</h4><ol>\n<li>首先模拟一下权限不足的场景</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/page_base_region** = roles[<span class=\"string\">\"base\"</span>]  &lt;!--需要有base这个角色才能访问这个路径 --&gt;</span><br></pre></td></tr></table></figure>\n<p>上面这行代码表示  需要有base这个角色才可以访问这个路径</p>\n<p>在 struts.xml中</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 需要进行权限控制的页面访问 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"page_*_*\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">type</span>=<span class=\"string\">\"dispatcher\"</span>&gt;</span>/WEB-INF/pages/&#123;1&#125;/&#123;2&#125;.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>那么这个时候，region页面放就访问不了了。</p>\n<p><img src=\"https://github.com/whyathere/tuchuang/blob/master/Shiro/unauthorized.jpg?raw=true\" alt=\"\"></p>\n<p>当当前用户没有角色或者权限的时候就会向这里跳转</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 权限不足，跳转路径  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"unauthorizedUrl\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"/unauthorized.jsp\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>思路：根据用户，查找到用户的ID，然后通过ID去查用户角色表</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SimpleAuthorizationInfo <span class=\"comment\">//实现类  提供 addRole（String） 角色 addStringPemission（String）权限</span></span><br></pre></td></tr></table></figure>\n<p>根据登录用户，查询 该用户具有的角色 拿到角色表设计code 值 添加到 该对象集合中/获取权限code 添加该对象 对象集合中</p>\n<p>addRole（String） 里的String 和xml文件中 roles[“base”]   的base进行比较</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> AuthorizationInfo <span class=\"title\">doGetAuthorizationInfo</span><span class=\"params\">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//AuthorizationInfo 授权管理 授权实现：根据当前登录用户  获取用户id  查询该用户在数据库表中  具有哪些角色 或者权限</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"---授权---\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//1号 jack 1 角色 code：base 可以访问  region 资源</span></span><br><span class=\"line\">    <span class=\"comment\">//2 号 rose 2角色 code：qupai 不可以访问 region 资源</span></span><br><span class=\"line\">    SimpleAuthorizationInfo info = <span class=\"keyword\">new</span> SimpleAuthorizationInfo();</span><br><span class=\"line\">    Subject subject = SecurityUtils.getSubject();</span><br><span class=\"line\">    User existUser = (User)subject.getPrincipal();</span><br><span class=\"line\">    <span class=\"comment\">//系统  超级管理员 和登录用户 账户是唯一的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">\"tom\"</span>.equals(existUser.getUsername()))&#123;</span><br><span class=\"line\">        <span class=\"comment\">//将系统中所有的角色关键字 code 和所有的权限 code 都添加 Info</span></span><br><span class=\"line\">        List&lt;Role&gt; roles=facadeService.getRoleService().findAllRoles();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Role role:roles)&#123;</span><br><span class=\"line\">            info.addRole(role.getCode()); <span class=\"comment\">//具有所有角色的关键字</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        List&lt;Function&gt; functions=facadeService.getFunctionService().findAllFunctions();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Function function:functions)&#123;</span><br><span class=\"line\">            info.addStringPermission(function.getCode());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//登录用户具有权限  根据当前登录用户 id  查询 该用户具有角色 以及 每个对应角色 对应权限</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> info;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建RoleService、FunctionService、Impl以及Dao</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subject.getPrincipal()  <span class=\"comment\">//获取对象</span></span><br></pre></td></tr></table></figure>\n<p>判断用户名是否是”tom”.如果是的话就把所有的权限和用户关键字给到tom。</p>\n<p>返回info</p>\n<h4 id=\"shiro授权之非超级管理员权限realm实现\"><a href=\"#shiro授权之非超级管理员权限realm实现\" class=\"headerlink\" title=\"shiro授权之非超级管理员权限realm实现\"></a>shiro授权之非超级管理员权限realm实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> AuthorizationInfo <span class=\"title\">doGetAuthorizationInfo</span><span class=\"params\">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//AuthorizationInfo 授权管理 授权实现：根据当前登录用户  获取用户id  查询该用户在数据库表中  具有哪些角色 或者权限</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"---授权---\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//1号 jack 1 角色 code：base 可以访问  region 资源</span></span><br><span class=\"line\">    <span class=\"comment\">//2 号 rose 2角色 code：qupai 不可以访问 region 资源</span></span><br><span class=\"line\">    SimpleAuthorizationInfo info = <span class=\"keyword\">new</span> SimpleAuthorizationInfo();</span><br><span class=\"line\">    Subject subject = SecurityUtils.getSubject();</span><br><span class=\"line\">    User existUser = (User) subject.getPrincipal();</span><br><span class=\"line\">    <span class=\"comment\">//系统  超级管理员 和登录用户 账户是唯一的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">\"tom\"</span>.equals(existUser.getUsername())) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//将系统中所有的角色关键字 code 和所有的权限 code 都添加 Info</span></span><br><span class=\"line\">        List&lt;Role&gt; roles = facadeService.getRoleService().findAllRoles();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Role role : roles) &#123;</span><br><span class=\"line\">            info.addRole(role.getCode()); <span class=\"comment\">//具有所有角色的关键字</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        List&lt;Function&gt; functions = facadeService.getFunctionService().findAllFunctions();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Function function : functions) &#123;</span><br><span class=\"line\">            info.addStringPermission(function.getCode());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//登录用户具有权限  根据当前登录用户 id  查询 该用户具有角色 以及 每个对应角色 对应权限</span></span><br><span class=\"line\">        List&lt;Role&gt; roles = facadeService.getRoleService().findAllRolesByUserId(existUser.getId());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Role role : roles) &#123;</span><br><span class=\"line\">            info.addRole(role.getCode());</span><br><span class=\"line\">            Set&lt;Function&gt; functions = role.getFunctions();  <span class=\"comment\">//每一个角色对应多个权限</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Function function : functions) &#123;</span><br><span class=\"line\">                info.addStringPermission(function.getCode());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> info;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//角色 role user_role 对象连接</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">RoleDao</span> <span class=\"keyword\">extends</span> <span class=\"title\">JpaRepository</span>&lt;<span class=\"title\">Role</span>,<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Query</span>(<span class=\"string\">\"from Role r inner join r.users u where u.id = ?1\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Role&gt; <span class=\"title\">findAllRolesByUserId</span><span class=\"params\">(String id)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>Query语句说明：内连接，需要Role和 中间表（user_role）都存在，join r.users就连接上了。然后查找u.id 因为在user_role 有user也有role。</p>\n<p>对于jpa来说，它做多变关系连接的时候，它有一个叫做迫切内连接和非迫切内连接。同样的也有迫切外连接和非迫切外连接。</p>\n<p><strong>区别</strong>：</p>\n<ul>\n<li><strong>非迫切内连接 ：</strong> 封装的结果集是Object[]。查的 时候并不是封装到List<role> 而是 List&lt;Object[]&gt;而Object数组内部有两个元素，一个是Role一个是Role的关联Function</role></li>\n<li><strong>迫切内连接 ：</strong>查询的结果集  封装单一的对象里面，在对象的内部引入了关联的集合。Function</li>\n</ul>\n<p>如果想封装到单一的Role中，就需要用迫切。就必须要用关键字fetch，非迫切就不需要fetch。</p>\n<p>而我们的数据结果集是要封装到Role中的要加fetch</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Query</span>(<span class=\"string\">\"from Role r inner join fetch r.users u where u.id = ?1\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Role&gt; <span class=\"title\">findAllRolesByUserId</span><span class=\"params\">(String id)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>这样Jpa会强制把结果集封装到单一的对象里去。</p>\n<p>如果不加fetch会放到一个Object集合中，第一个元素是Role第二个是Function集合</p>\n<p>这里泛型是和from后面跟的对象一致的</p>\n<p>这里就可以看出code关键字是base的可以访问“区域”页面。而没有这个关键字的不能访问。</p>\n<h4 id=\"shiro注解权限控制配置说明\"><a href=\"#shiro注解权限控制配置说明\" class=\"headerlink\" title=\"shiro注解权限控制配置说明\"></a>shiro注解权限控制配置说明</h4><p>目前想要访问region页面必须角色有这个的关键字”base”，现在jack 和tom 有，而rose没有</p>\n<p><img src=\"https://github.com/whyathere/tuchuang/blob/master/Shiro/%E8%A7%92%E8%89%B2%E6%88%AA%E5%9B%BE.jpg?raw=true\" alt=\"\"></p>\n<p>rose是不能查询取派员的。</p>\n<p>方法级别只需要添加一个注解就可以给到这个权限了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 取派员分页查询</span></span><br><span class=\"line\"><span class=\"meta\">@Action</span>(value = <span class=\"string\">\"staffAction_pageQuery\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@RequiresRoles</span>(value = <span class=\"string\">\"base\"</span>)  <span class=\"comment\">//访问这个资源就需要有base权限</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">pageQuery</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   Map&lt;String,Object&gt; data=<span class=\"keyword\">new</span> HashMap&lt;String,Object&gt;();</span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      Page &lt;Staff&gt; pageData=serviceFacade.getStaffService().pageQuery(getPageRequest());</span><br><span class=\"line\">      setPageData(pageData); <span class=\"comment\">//提供给父类</span></span><br><span class=\"line\">      <span class=\"comment\">//dao  参数   Pageable pageable   自动完成分页查询   将分页结果数据   自动封装到Page&lt;T&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">//从Page  对象获取总记录数  和   每页分页记录数List&lt;Staff&gt;</span></span><br><span class=\"line\">   &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">      e.printStackTrace();</span><br><span class=\"line\">      push(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"string\">\"pageQuery\"</span>;  <span class=\"comment\">//走全局结果集</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>@RequiresRoles(value = “base”)   //访问这个资源就需要有base权限</p>\n<p><strong>注解方式原理：</strong></p>\n<p>首先目前就算加上注解还是不能用的。</p>\n<p>shiro 注解原理：注解信息是通过反射来读的</p>\n<p>涉及到动态代理：代理类对目标类方法进行加强。  方法是：pageQuery。采用了Spring 的aop来实现的。</p>\n<p>aop：面向接口代理</p>\n<p>​    代理类 $proxy。。和 目标类  StaffAction 的关系：</p>\n<p>​    兄弟关系    都属于接口实现类</p>\n<p>代理类：面向目标类代理</p>\n<p>代理类和目标类  是 父子关系</p>\n<p>代理类是目标类  StaffAction 子类</p>\n<p>默认向  StaffAction  接口做代理类  ，shiro注解的代理类是向接口做代理</p>\n<p>shiro注解配置权限需要：</p>\n<ol>\n<li>开启注解配置aop</li>\n<li>目标方法上添加注解即可</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--使用注解完成 权限管理  启用注解 需要配置3个bean--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- spring bean 对象后处理器  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"lifecycleBeanPostProcessor\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.shiro.spring.LifecycleBeanPostProcessor\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 切面自动代理 bean生成注解代理类实现者 修改代理类生成策略 面向接口 默认面向接口代理 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">depends-on</span>=<span class=\"string\">\"lifecycleBeanPostProcessor\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 切面 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"securityManager\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"securityManager\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这个时候取派员页面，tom可以正常访问显示。jack报错。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">42</span>:<span class=\"number\">00</span>,<span class=\"number\">780</span> ERROR Dispatcher:<span class=\"number\">38</span> - Exception occurred during processing request: com.sun.proxy.$Proxy58.pageQuery()</span><br><span class=\"line\"></span><br><span class=\"line\">java.lang.NoSuchMethodException: com.sun.proxy.$Proxy58.pageQuery()</span><br></pre></td></tr></table></figure>\n<p>原因：默认是面向接口做代理，当前类有接口。但是当前类的接口没有pageQuery方法。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 切面自动代理 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">depends-on</span>=<span class=\"string\">\"lifecycleBeanPostProcessor\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这个bean负责生成代理类。</p>\n<p>改为</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 切面自动代理 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">depends-on</span>=<span class=\"string\">\"lifecycleBeanPostProcessor\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"proxyTargetClass\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样就从面向接口变为面向类</p>\n<p>这个时候还是木有啊！！</p>\n<p>新的异常</p>\n<p><img src=\"https://github.com/whyathere/tuchuang/blob/master/Shiro/shiro%E5%BC%82%E5%B8%B8.jpg?raw=true\" alt=\"\"></p>\n<p>这里是报的父类的错，这说明类型不一样。</p>\n<p>父类获取子类参数化泛型  父类可以获取到  staff  可以进行实例化。</p>\n<p>BaseAction无法获取代理类泛型！</p>\n<p>默认是Object类型</p>\n<p>原因：代理类没有泛型，代理类是动态生成的。泛型在编译的时候有效，运行的时候就没有了。</p>\n<p>泛型的作用周期是编译期，运行的时候所有的泛型就都消失了。</p>\n<p>解决方法，不要从代理类去找。去父类找</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 目的 获取子类参数化类型</span></span><br><span class=\"line\"><span class=\"comment\">// 父类构造方法中 使用 参数化泛型+反射 获取子类具体泛型对应类型 newInstance 创建实例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseAction</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对model进行实例化， 通过子类 类声明的泛型</span></span><br><span class=\"line\">    Type superclass = <span class=\"keyword\">this</span>.getClass().getGenericSuperclass();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(superclass <span class=\"keyword\">instanceof</span> ParameterizedType))&#123;</span><br><span class=\"line\">        <span class=\"comment\">//没有代理类</span></span><br><span class=\"line\">      superclass =  <span class=\"keyword\">this</span>.getClass().getSuperclass().getGenericSuperclass();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 转化为参数化类型</span></span><br><span class=\"line\">    ParameterizedType parameterizedType = (ParameterizedType) superclass;</span><br><span class=\"line\">    <span class=\"comment\">// 获取一个泛型参数</span></span><br><span class=\"line\">    Class&lt;T&gt; modelClass = (Class&lt;T&gt;) parameterizedType.getActualTypeArguments()[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        model = modelClass.newInstance();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InstantiationException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这次报了空指针异常</p>\n<p>java.lang.NullPointerException</p>\n<p>原因：在FacadeService中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"comment\">// 注入 业务层实例</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> StaffService staffService;</span><br></pre></td></tr></table></figure>\n<p>这个注解没有将接口实例注入给接口</p>\n<p><img src=\"https://github.com/whyathere/tuchuang/blob/master/Shiro/%E5%8E%9F%E5%9B%A0.jpg?raw=true\" alt=\"\"></p>\n<p>就是代理类没有继承@Autowried注解</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--更改默认配置文件信息--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.objectFactory.spring.autoWire.alwaysRespect\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在struts.xml中添加这个</p>\n<p>让代理类可以继承AutoWired注解</p>\n"}],"Post":[{"title":"管理与实务","date":"2018-06-05T02:03:30.000Z","_content":"\n## 必考：\n\n1.  钢结构\n2. 混凝土\n3. 民用住宅高度范围\n\n## 建筑\n\n1. 按照高度和层数划分\n\n![image-20210324205933073](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210324205933073.png)\n\n宅7公4，如果一个公共建筑只有一层但是高度是30m也叫单层，公共建筑只有一层不管多高都叫单层，但民用不是。\n\n\n\n带着问题去思考\n\n2.建筑物的组成体系\n\n![image-20210324210500460](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210324210500460.png)\n\n结构体系：受力的。地级不属于结构体系\n\n围护体系：内墙不属于围护体系，内门窗不属于围护体系。起分割作用(能够遮蔽外界恶劣气候的侵袭，同时也起到隔声的作用)\n\n3. 建筑物\n\n4. ![image-20210324211011854](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210324211011854.png)\n\n   女儿墙：屋顶的外墙\n\n   从顶部看，长边叫纵，短边叫横。横向最外面的墙叫山墙。\n\n5. 民用建筑的要求\n\n民用建筑的构造\n\n ![image-20210325204417450](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210325204417450.png)\n\n![image-20210325204518373](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210325204518373.png)\n\n6.\n\n![image-20210325204806360](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210325204806360.png)\n\n7. 楼梯及栏杆的相关规定\n\n![image-20210325212612717](/Users/mac/Library/Application Support/typora-user-images/image-20210325212612717.png)\n\n![image-20210408210339225](https://gitee.com/JefferyZero/imgcloud/raw/master/img/20210408210425.png)\n\n\n\n梯段\n\n![image-20210325213142823](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210325213142823.png)\n\n8. 防潮层的构造及功能\n9. 墙体防潮应符合下列要求：\n   1. 砌体墙应在室外地面以上，位于室内地面垫层处设置连续的水平防潮层；\n   2. 室内相邻地面有高差时，应在高差处墙身贴临土壤一侧加设防潮层\n   3. 室内墙面有防潮要求时，其迎水一侧应设防水层；室内墙面有防水要求时，其迎水一侧应设防水层；室内墙面有防污、防碰等要求时，应按使用要求设置墙裙。\n\n![image-20210325214744965](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210325214744965.png)\n\n![image-20210325214825277](/Users/mac/Library/Application Support/typora-user-images/image-20210325214825277.png)\n\n### 建筑材料\n\n![image-20210408210455263](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210408210455263.png)\n\n\n\n#### 常用建筑金属材料的品种、性能和应用\n\n![image-20210331211331828](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210331211331828.png)\n\n##### 常用建筑钢材\n\n钢的概念：以铁为主要元素，含碳量为0.02%~2.06%,并含有其他元素的合金材料。\n\n分类：按含碳量分类(低、中、高)\n\n应用：优质碳素结构钢一般用于生产预应力混凝土用钢丝、钢绞线、锚具，以及高强度螺栓、重要结构的钢铸件等。\n\n###### 钢结构用钢\n\n![image-20210331213443743](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210331213443743.png)\n\n###### 钢筋混凝土结构用钢\n\n![image-20210331213628999](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210331213628999.png)\n\nH： 热轧 \t\t\tC：冷轧\n\nR：带肋(形态)\t P：光圆\n\nB：钢筋\n\nF：细晶粒(塑形更好)\n\nE：抗震\n\n\n\n##### 建筑钢材的力学性能\n\n#### 水泥的性能和应用\n\n![image-20210404143231969](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210404143231969.png)\n\n比如水泥加水拌和以后，会凝固并产生强度叫做胶凝。\n\n![image-20210404143826315](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210404143826315.png)\n\n水泥的技术要求\n\n凝结时间\n\n- 初凝：从水泥和水拌合起至水泥浆开始失去可塑性所需的时间。 要求》=45min\n\n- 终凝：从水泥加水拌合起至水泥浆完全失去可塑性并开始产生强度所需的时间。要求：硅酸盐=<6.5h.  其他五类=<10h\n\n![image-20210404144252938](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210404144252938.png)\n\n失塑：失去流动性。\n\n![image-20210404144942728](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210404144942728.png)\n\n#### 混凝土(外加剂)的性能和应用\n\n普通混凝土一般由：石、水泥、砂和水组成，为改善性能还常加入适量的外加剂和掺合料。\n\n混凝土在凝固的时候需要保水保温和保湿。\n\n##### 混凝土的技术性能\n\n（一）混凝土拌合物的和易性\n\n​\t\t和易性是指混凝土拌合物易于施工操作并能获得质量均匀、成型密实的性能，又称工作性。\n\n​\t\t1、和易性包括`流动性`、`黏聚性`和`保水性`三个方面。\n\n​\t\t2、用坍落度试验来测定混凝土拌合物的坍落度或坍落扩展度，作为流动性指标，`坍落度或坍落扩展度愈大表示流动性愈大。`\n\n影响混凝土拌合物和易性的主要因素包括：单位体积用水量、砂率、组成材料的性质、时间和温度等。`单位体积用水量`决定水泥浆的数量和稠度，它是影响混凝土和易性的最主要因素。\n\n​\t\t\n\n![image-20210404205358306](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210404205358306.png)\n\n##### 外加剂\n\n![image-20210404205945037](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210404205945037.png)\n\n![image-20210404210156163](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210404210156163.png)\n\n![image-20210404210525307](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210404210525307.png)\n\n#### 砂浆、砌块的技术性能和应用\n\n内容：\n\n- 砂浆的主要技术性质\n- 砌块的技术要求\n\n砂浆的组成材料：\n\n- 胶凝材料：常用的有水泥、石灰、石膏等。\n- 细骨料：砂子\n- 掺合料：指为改善砂浆和易性而加入的无机材料。掺合料对砂浆强度无直接影响。\n\n##### 砂浆的主要技术性质\n\n1. 流动性（`稠度`）稠度越大越稀，流动性越大\n\n定义：稠度是以砂浆稠度测定仪的圆锥体沉入砂浆内的深度表示。\n\n影响：沉入深度越大，砂浆的流动性越大。\n\n应用：对于吸水性强的砌体材料和高温干燥的天气，要求砂浆稠度要大些；反之，对于密实不吸水的砌体材料和湿冷天气，砂浆稠度可小些。\n\n影响稠度的因素：胶凝材料种类及数量；用水量；掺合料的种类与数量；砂的形状、粗细与级配；外加剂的种类与搀量；搅拌时间。(2020年已考)\n\n2. 保水性\n\n保水性指砂浆拌合物保持水分的能力。砂浆的保水性用分层表示，砂浆的`分层度不得大于30mm`。\n\n3. 抗压强度与强度等级\n\n​       砂浆强度等级是以边长为70.7mm的立方体试块，在标准养护条件，用标准试验方法测得28d期龄的抗压强度值(单位为Mpa)确定\n\n​      砂浆强度等级分为M30～M5七个等级。\n\n砂浆强度评定：\n\n(1)立方体试件以3个为一组进行评定，以三个试件测值的算数平均值作为该组试件的砂浆立方体试件抗压强度平均值(f2)(精确至0.1MPa)\n\n相互比较是否与中间值超过15%\n\n如果有一个超过15%，取中间值为准。\n\n如果两侧与中间值均超过15%，则该组试件的试验结果作废。\n\n##### ![image-20210406203152849](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210406203152849.png)\n\n##### 砌块\n\n1. 砌块的分类\n\n砌块按珠规格尺寸可分为小砌块、中砌块和大砌块。\n\n按其空心率大小砌块又可分为`空心`砌块和`实心`砌块两种。\n\n空心率小于25%或无孔洞的砌块为实心砌块；空心率大于或等于25%的砌块为空心砌块。\t\n\n![image-20210406203632717](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210406203632717.png)\n\n由于不是烧结的所以密度很大，不需要浇水。混凝土砌块砌筑前不允许浇水。\n\n![image-20210406203950316](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210406203950316.png)\n\n#### 饰面石材、陶瓷的特性和应用\n\n##### 饰面石材\n\n![image-20210406204146830](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210406204146830.png)\n\n花岗岩是`酸性`石材，大理石是`碱性`石材(结构单一)。\n\n##### 建筑卫生陶瓷\n\n![image-20210408210537745](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210408210537745.png)\n\n\n\n##### 总结\n\n![image-20210406210518580](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210406210518580.png)\n\n#### 木材、木制品的特性和应用(每年一个)\n\n![image-20210406210818044](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210406210818044.png)\n\n平衡含水率：在一定的湿度和温度条件下，木材中的水分与空气中的水分不再进行交换而达到稳定状态时的含水率。\n\n纤维饱和点：是木材仅细胞壁中的吸附水达饱和而细胞腔和细胞间隙中无自由水存在时的含水率。其值随树种而异，一般为25%～35%，平均值30%。它是木材物理力学性质是否随含水率而发生变化的转折点。`木材仅当细胞壁内吸附水的含量发生变化时才会引起木材的变形，即湿胀干缩变形`。\n\n木材在使用前进行烘干的主要目的是`使其含水率与环境湿度基本平衡`\n\n湿胀可造成表面鼓凸。\n\n##### 木制品的特性和应用\n\n![image-20210408210605144](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210408210605144.png)\n\n#### 玻璃的特性和应用\n\n内容：\n\n- 净片玻璃\n- 安全玻璃的特性与应用\n- 节能装饰型玻璃的特性与应用\n\n![image-20210406213822056](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210406213822056.png)\n\n![image-20210406214450873](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210406214450873.png)\n\n#### 防水材料的特性和应用\n\n内容：\n\n- 防水卷材\n- 建筑防水涂料\n- 刚性防水材料\n\n![image-20210408210739661](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210408210739661.png)\n\n##### 防水卷材\n\n![image-20210408210926539](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210408210926539.png)\n\n沥青本身的不透水性就很强，然后粘接的也很牢固。\n\n#####  建筑防水涂料(适合复杂结构)\n\n![image-20210408211330989](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210408211330989.png)\n\n## 建筑工程专业施工技术\n\n![image-20210412193041043](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210412193041043.png)\n\n\n\n### 主体结构工程施工技术\n\n`考题`\n\n- 钢筋混凝土结构工程 \n- 装配式工程\n\n#### 钢筋混凝土结构工程施工技术`重点`\n\n![image-20210412193305446](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210412193305446.png)\n\n\n\n##### 模板工程\n\n安装、拆卸\n\n![image-20210412193505038](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210412193505038.png)\n\n###### (一)常见模板体系及其特性\n\n![image-20210412193703249](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210412193703249.png)\n\n![image-20210412193901113](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210412193901113.png)\n\n###### `(二)模板工程设计的主要原则`\n\n(1) 实用性：模板要保证构件形状尺寸和相互位置的正确，且构造简单、支拆方便、表面平整、接缝严密不漏浆等。\n\n(2) 安全性：要具有足够的强度、刚度和稳定性，保证施工中不变形、不破坏、不倒塌。\n\n(3) 经济性：在确保工程质量、安全和工期的前提下，尽量减少一次性投入，增加模板周转次数，减少支拆用工，实现文明施工。\n\n###### `(三)模板及支架设计应包括的主要内容`\n\n1. 模板及支架的选型及构造设计；\n2. 模板及支架上的荷载及其效应`计算`；\n3. 模板及支架的承载力、刚度`验算`;\n4. 模板及支架的抗倾覆`验算`;\n5. 绘制模板及支架施工图。\n\n![image-20210412194754721](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210412194754721.png)\n\n###### (四)模板工程的安装要点\n\n(1) 模板安装应按设计与施工说明书顺序拼装。木杆、钢管、门架等支柱立柱不得混用。5米以上必须钢柱。\n\n(4) 对跨度不小于4m的现浇钢筋混凝土梁、板，其模板应按设计要求起拱；当设计无具体要求时，起拱高度应为跨度的1/1000~3/1000。\n\n![image-20210412195310416](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210412195310416.png)\n\n(7) 模板安装应保证混凝土结构构件各部分形状、尺寸和相对位置准确；模板的`接缝不应漏浆`:在浇筑混凝土前，木模板`应浇水润湿`，但模板内不应有积水(木模板不浇水会吸走混凝土内的水分，积水也会影响混凝土的水胶比)。\n\n(8) 模板与混凝土的接触面应清理干净`并涂刷隔离剂`，不得采用影响结构性能或妨碍装饰工程的隔离剂；`脱模剂不得污染钢筋和混凝土接槎处`。\n\n(10) 浇筑混凝土前，模板内的杂物应清理干净(可设置清扫口)\n\n(13) 固定在模板上的`预埋件`、`预留孔`和`预留洞`均不得遗漏，且应安装牢固、位置准确。\n\n`问题：`\n\n混凝土浇筑前，项目部应对模板分项工程进行那些检查？\n\n`答案 `1.检查模板尺寸偏差，面板是否清洁、接缝是否密封，检查与混凝土接触面是否平整，是否按要求起拱，检查预埋件尺寸和数量，检查隔离剂涂刷。\n\n![image-20210412200402102](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210412200402102.png)\n\n","source":"_posts/二级建造师.md","raw":"---\ntitle: 管理与实务\ndate: 2018-06-05 10:03:30\ntags: 管理与实务\ncategories: 二级建造师\n\n\n---\n\n## 必考：\n\n1.  钢结构\n2. 混凝土\n3. 民用住宅高度范围\n\n## 建筑\n\n1. 按照高度和层数划分\n\n![image-20210324205933073](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210324205933073.png)\n\n宅7公4，如果一个公共建筑只有一层但是高度是30m也叫单层，公共建筑只有一层不管多高都叫单层，但民用不是。\n\n\n\n带着问题去思考\n\n2.建筑物的组成体系\n\n![image-20210324210500460](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210324210500460.png)\n\n结构体系：受力的。地级不属于结构体系\n\n围护体系：内墙不属于围护体系，内门窗不属于围护体系。起分割作用(能够遮蔽外界恶劣气候的侵袭，同时也起到隔声的作用)\n\n3. 建筑物\n\n4. ![image-20210324211011854](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210324211011854.png)\n\n   女儿墙：屋顶的外墙\n\n   从顶部看，长边叫纵，短边叫横。横向最外面的墙叫山墙。\n\n5. 民用建筑的要求\n\n民用建筑的构造\n\n ![image-20210325204417450](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210325204417450.png)\n\n![image-20210325204518373](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210325204518373.png)\n\n6.\n\n![image-20210325204806360](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210325204806360.png)\n\n7. 楼梯及栏杆的相关规定\n\n![image-20210325212612717](/Users/mac/Library/Application Support/typora-user-images/image-20210325212612717.png)\n\n![image-20210408210339225](https://gitee.com/JefferyZero/imgcloud/raw/master/img/20210408210425.png)\n\n\n\n梯段\n\n![image-20210325213142823](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210325213142823.png)\n\n8. 防潮层的构造及功能\n9. 墙体防潮应符合下列要求：\n   1. 砌体墙应在室外地面以上，位于室内地面垫层处设置连续的水平防潮层；\n   2. 室内相邻地面有高差时，应在高差处墙身贴临土壤一侧加设防潮层\n   3. 室内墙面有防潮要求时，其迎水一侧应设防水层；室内墙面有防水要求时，其迎水一侧应设防水层；室内墙面有防污、防碰等要求时，应按使用要求设置墙裙。\n\n![image-20210325214744965](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210325214744965.png)\n\n![image-20210325214825277](/Users/mac/Library/Application Support/typora-user-images/image-20210325214825277.png)\n\n### 建筑材料\n\n![image-20210408210455263](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210408210455263.png)\n\n\n\n#### 常用建筑金属材料的品种、性能和应用\n\n![image-20210331211331828](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210331211331828.png)\n\n##### 常用建筑钢材\n\n钢的概念：以铁为主要元素，含碳量为0.02%~2.06%,并含有其他元素的合金材料。\n\n分类：按含碳量分类(低、中、高)\n\n应用：优质碳素结构钢一般用于生产预应力混凝土用钢丝、钢绞线、锚具，以及高强度螺栓、重要结构的钢铸件等。\n\n###### 钢结构用钢\n\n![image-20210331213443743](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210331213443743.png)\n\n###### 钢筋混凝土结构用钢\n\n![image-20210331213628999](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210331213628999.png)\n\nH： 热轧 \t\t\tC：冷轧\n\nR：带肋(形态)\t P：光圆\n\nB：钢筋\n\nF：细晶粒(塑形更好)\n\nE：抗震\n\n\n\n##### 建筑钢材的力学性能\n\n#### 水泥的性能和应用\n\n![image-20210404143231969](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210404143231969.png)\n\n比如水泥加水拌和以后，会凝固并产生强度叫做胶凝。\n\n![image-20210404143826315](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210404143826315.png)\n\n水泥的技术要求\n\n凝结时间\n\n- 初凝：从水泥和水拌合起至水泥浆开始失去可塑性所需的时间。 要求》=45min\n\n- 终凝：从水泥加水拌合起至水泥浆完全失去可塑性并开始产生强度所需的时间。要求：硅酸盐=<6.5h.  其他五类=<10h\n\n![image-20210404144252938](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210404144252938.png)\n\n失塑：失去流动性。\n\n![image-20210404144942728](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210404144942728.png)\n\n#### 混凝土(外加剂)的性能和应用\n\n普通混凝土一般由：石、水泥、砂和水组成，为改善性能还常加入适量的外加剂和掺合料。\n\n混凝土在凝固的时候需要保水保温和保湿。\n\n##### 混凝土的技术性能\n\n（一）混凝土拌合物的和易性\n\n​\t\t和易性是指混凝土拌合物易于施工操作并能获得质量均匀、成型密实的性能，又称工作性。\n\n​\t\t1、和易性包括`流动性`、`黏聚性`和`保水性`三个方面。\n\n​\t\t2、用坍落度试验来测定混凝土拌合物的坍落度或坍落扩展度，作为流动性指标，`坍落度或坍落扩展度愈大表示流动性愈大。`\n\n影响混凝土拌合物和易性的主要因素包括：单位体积用水量、砂率、组成材料的性质、时间和温度等。`单位体积用水量`决定水泥浆的数量和稠度，它是影响混凝土和易性的最主要因素。\n\n​\t\t\n\n![image-20210404205358306](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210404205358306.png)\n\n##### 外加剂\n\n![image-20210404205945037](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210404205945037.png)\n\n![image-20210404210156163](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210404210156163.png)\n\n![image-20210404210525307](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210404210525307.png)\n\n#### 砂浆、砌块的技术性能和应用\n\n内容：\n\n- 砂浆的主要技术性质\n- 砌块的技术要求\n\n砂浆的组成材料：\n\n- 胶凝材料：常用的有水泥、石灰、石膏等。\n- 细骨料：砂子\n- 掺合料：指为改善砂浆和易性而加入的无机材料。掺合料对砂浆强度无直接影响。\n\n##### 砂浆的主要技术性质\n\n1. 流动性（`稠度`）稠度越大越稀，流动性越大\n\n定义：稠度是以砂浆稠度测定仪的圆锥体沉入砂浆内的深度表示。\n\n影响：沉入深度越大，砂浆的流动性越大。\n\n应用：对于吸水性强的砌体材料和高温干燥的天气，要求砂浆稠度要大些；反之，对于密实不吸水的砌体材料和湿冷天气，砂浆稠度可小些。\n\n影响稠度的因素：胶凝材料种类及数量；用水量；掺合料的种类与数量；砂的形状、粗细与级配；外加剂的种类与搀量；搅拌时间。(2020年已考)\n\n2. 保水性\n\n保水性指砂浆拌合物保持水分的能力。砂浆的保水性用分层表示，砂浆的`分层度不得大于30mm`。\n\n3. 抗压强度与强度等级\n\n​       砂浆强度等级是以边长为70.7mm的立方体试块，在标准养护条件，用标准试验方法测得28d期龄的抗压强度值(单位为Mpa)确定\n\n​      砂浆强度等级分为M30～M5七个等级。\n\n砂浆强度评定：\n\n(1)立方体试件以3个为一组进行评定，以三个试件测值的算数平均值作为该组试件的砂浆立方体试件抗压强度平均值(f2)(精确至0.1MPa)\n\n相互比较是否与中间值超过15%\n\n如果有一个超过15%，取中间值为准。\n\n如果两侧与中间值均超过15%，则该组试件的试验结果作废。\n\n##### ![image-20210406203152849](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210406203152849.png)\n\n##### 砌块\n\n1. 砌块的分类\n\n砌块按珠规格尺寸可分为小砌块、中砌块和大砌块。\n\n按其空心率大小砌块又可分为`空心`砌块和`实心`砌块两种。\n\n空心率小于25%或无孔洞的砌块为实心砌块；空心率大于或等于25%的砌块为空心砌块。\t\n\n![image-20210406203632717](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210406203632717.png)\n\n由于不是烧结的所以密度很大，不需要浇水。混凝土砌块砌筑前不允许浇水。\n\n![image-20210406203950316](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210406203950316.png)\n\n#### 饰面石材、陶瓷的特性和应用\n\n##### 饰面石材\n\n![image-20210406204146830](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210406204146830.png)\n\n花岗岩是`酸性`石材，大理石是`碱性`石材(结构单一)。\n\n##### 建筑卫生陶瓷\n\n![image-20210408210537745](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210408210537745.png)\n\n\n\n##### 总结\n\n![image-20210406210518580](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210406210518580.png)\n\n#### 木材、木制品的特性和应用(每年一个)\n\n![image-20210406210818044](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210406210818044.png)\n\n平衡含水率：在一定的湿度和温度条件下，木材中的水分与空气中的水分不再进行交换而达到稳定状态时的含水率。\n\n纤维饱和点：是木材仅细胞壁中的吸附水达饱和而细胞腔和细胞间隙中无自由水存在时的含水率。其值随树种而异，一般为25%～35%，平均值30%。它是木材物理力学性质是否随含水率而发生变化的转折点。`木材仅当细胞壁内吸附水的含量发生变化时才会引起木材的变形，即湿胀干缩变形`。\n\n木材在使用前进行烘干的主要目的是`使其含水率与环境湿度基本平衡`\n\n湿胀可造成表面鼓凸。\n\n##### 木制品的特性和应用\n\n![image-20210408210605144](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210408210605144.png)\n\n#### 玻璃的特性和应用\n\n内容：\n\n- 净片玻璃\n- 安全玻璃的特性与应用\n- 节能装饰型玻璃的特性与应用\n\n![image-20210406213822056](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210406213822056.png)\n\n![image-20210406214450873](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210406214450873.png)\n\n#### 防水材料的特性和应用\n\n内容：\n\n- 防水卷材\n- 建筑防水涂料\n- 刚性防水材料\n\n![image-20210408210739661](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210408210739661.png)\n\n##### 防水卷材\n\n![image-20210408210926539](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210408210926539.png)\n\n沥青本身的不透水性就很强，然后粘接的也很牢固。\n\n#####  建筑防水涂料(适合复杂结构)\n\n![image-20210408211330989](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210408211330989.png)\n\n## 建筑工程专业施工技术\n\n![image-20210412193041043](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210412193041043.png)\n\n\n\n### 主体结构工程施工技术\n\n`考题`\n\n- 钢筋混凝土结构工程 \n- 装配式工程\n\n#### 钢筋混凝土结构工程施工技术`重点`\n\n![image-20210412193305446](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210412193305446.png)\n\n\n\n##### 模板工程\n\n安装、拆卸\n\n![image-20210412193505038](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210412193505038.png)\n\n###### (一)常见模板体系及其特性\n\n![image-20210412193703249](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210412193703249.png)\n\n![image-20210412193901113](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210412193901113.png)\n\n###### `(二)模板工程设计的主要原则`\n\n(1) 实用性：模板要保证构件形状尺寸和相互位置的正确，且构造简单、支拆方便、表面平整、接缝严密不漏浆等。\n\n(2) 安全性：要具有足够的强度、刚度和稳定性，保证施工中不变形、不破坏、不倒塌。\n\n(3) 经济性：在确保工程质量、安全和工期的前提下，尽量减少一次性投入，增加模板周转次数，减少支拆用工，实现文明施工。\n\n###### `(三)模板及支架设计应包括的主要内容`\n\n1. 模板及支架的选型及构造设计；\n2. 模板及支架上的荷载及其效应`计算`；\n3. 模板及支架的承载力、刚度`验算`;\n4. 模板及支架的抗倾覆`验算`;\n5. 绘制模板及支架施工图。\n\n![image-20210412194754721](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210412194754721.png)\n\n###### (四)模板工程的安装要点\n\n(1) 模板安装应按设计与施工说明书顺序拼装。木杆、钢管、门架等支柱立柱不得混用。5米以上必须钢柱。\n\n(4) 对跨度不小于4m的现浇钢筋混凝土梁、板，其模板应按设计要求起拱；当设计无具体要求时，起拱高度应为跨度的1/1000~3/1000。\n\n![image-20210412195310416](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210412195310416.png)\n\n(7) 模板安装应保证混凝土结构构件各部分形状、尺寸和相对位置准确；模板的`接缝不应漏浆`:在浇筑混凝土前，木模板`应浇水润湿`，但模板内不应有积水(木模板不浇水会吸走混凝土内的水分，积水也会影响混凝土的水胶比)。\n\n(8) 模板与混凝土的接触面应清理干净`并涂刷隔离剂`，不得采用影响结构性能或妨碍装饰工程的隔离剂；`脱模剂不得污染钢筋和混凝土接槎处`。\n\n(10) 浇筑混凝土前，模板内的杂物应清理干净(可设置清扫口)\n\n(13) 固定在模板上的`预埋件`、`预留孔`和`预留洞`均不得遗漏，且应安装牢固、位置准确。\n\n`问题：`\n\n混凝土浇筑前，项目部应对模板分项工程进行那些检查？\n\n`答案 `1.检查模板尺寸偏差，面板是否清洁、接缝是否密封，检查与混凝土接触面是否平整，是否按要求起拱，检查预埋件尺寸和数量，检查隔离剂涂刷。\n\n![image-20210412200402102](https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210412200402102.png)\n\n","slug":"二级建造师","published":1,"updated":"2021-04-12T12:04:07.423Z","_id":"ckn6309la0003251yf9a454ua","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"必考：\"><a href=\"#必考：\" class=\"headerlink\" title=\"必考：\"></a>必考：</h2><ol>\n<li>钢结构</li>\n<li>混凝土</li>\n<li>民用住宅高度范围</li>\n</ol>\n<h2 id=\"建筑\"><a href=\"#建筑\" class=\"headerlink\" title=\"建筑\"></a>建筑</h2><ol>\n<li>按照高度和层数划分</li>\n</ol>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210324205933073.png\" alt=\"image-20210324205933073\"></p>\n<p>宅7公4，如果一个公共建筑只有一层但是高度是30m也叫单层，公共建筑只有一层不管多高都叫单层，但民用不是。</p>\n<p>带着问题去思考</p>\n<p>2.建筑物的组成体系</p>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210324210500460.png\" alt=\"image-20210324210500460\"></p>\n<p>结构体系：受力的。地级不属于结构体系</p>\n<p>围护体系：内墙不属于围护体系，内门窗不属于围护体系。起分割作用(能够遮蔽外界恶劣气候的侵袭，同时也起到隔声的作用)</p>\n<ol start=\"3\">\n<li><p>建筑物</p>\n</li>\n<li><p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210324211011854.png\" alt=\"image-20210324211011854\"></p>\n<p>女儿墙：屋顶的外墙</p>\n<p>从顶部看，长边叫纵，短边叫横。横向最外面的墙叫山墙。</p>\n</li>\n<li><p>民用建筑的要求</p>\n</li>\n</ol>\n<p>民用建筑的构造</p>\n<p> <img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210325204417450.png\" alt=\"image-20210325204417450\"></p>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210325204518373.png\" alt=\"image-20210325204518373\"></p>\n<p>6.</p>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210325204806360.png\" alt=\"image-20210325204806360\"></p>\n<ol start=\"7\">\n<li>楼梯及栏杆的相关规定</li>\n</ol>\n<p><img src=\"/Users/mac/Library/Application Support/typora-user-images/image-20210325212612717.png\" alt=\"image-20210325212612717\"></p>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/20210408210425.png\" alt=\"image-20210408210339225\"></p>\n<p>梯段</p>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210325213142823.png\" alt=\"image-20210325213142823\"></p>\n<ol start=\"8\">\n<li>防潮层的构造及功能</li>\n<li>墙体防潮应符合下列要求：<ol>\n<li>砌体墙应在室外地面以上，位于室内地面垫层处设置连续的水平防潮层；</li>\n<li>室内相邻地面有高差时，应在高差处墙身贴临土壤一侧加设防潮层</li>\n<li>室内墙面有防潮要求时，其迎水一侧应设防水层；室内墙面有防水要求时，其迎水一侧应设防水层；室内墙面有防污、防碰等要求时，应按使用要求设置墙裙。</li>\n</ol>\n</li>\n</ol>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210325214744965.png\" alt=\"image-20210325214744965\"></p>\n<p><img src=\"/Users/mac/Library/Application Support/typora-user-images/image-20210325214825277.png\" alt=\"image-20210325214825277\"></p>\n<h3 id=\"建筑材料\"><a href=\"#建筑材料\" class=\"headerlink\" title=\"建筑材料\"></a>建筑材料</h3><p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210408210455263.png\" alt=\"image-20210408210455263\"></p>\n<h4 id=\"常用建筑金属材料的品种、性能和应用\"><a href=\"#常用建筑金属材料的品种、性能和应用\" class=\"headerlink\" title=\"常用建筑金属材料的品种、性能和应用\"></a>常用建筑金属材料的品种、性能和应用</h4><p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210331211331828.png\" alt=\"image-20210331211331828\"></p>\n<h5 id=\"常用建筑钢材\"><a href=\"#常用建筑钢材\" class=\"headerlink\" title=\"常用建筑钢材\"></a>常用建筑钢材</h5><p>钢的概念：以铁为主要元素，含碳量为0.02%~2.06%,并含有其他元素的合金材料。</p>\n<p>分类：按含碳量分类(低、中、高)</p>\n<p>应用：优质碳素结构钢一般用于生产预应力混凝土用钢丝、钢绞线、锚具，以及高强度螺栓、重要结构的钢铸件等。</p>\n<h6 id=\"钢结构用钢\"><a href=\"#钢结构用钢\" class=\"headerlink\" title=\"钢结构用钢\"></a>钢结构用钢</h6><p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210331213443743.png\" alt=\"image-20210331213443743\"></p>\n<h6 id=\"钢筋混凝土结构用钢\"><a href=\"#钢筋混凝土结构用钢\" class=\"headerlink\" title=\"钢筋混凝土结构用钢\"></a>钢筋混凝土结构用钢</h6><p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210331213628999.png\" alt=\"image-20210331213628999\"></p>\n<p>H： 热轧             C：冷轧</p>\n<p>R：带肋(形态)     P：光圆</p>\n<p>B：钢筋</p>\n<p>F：细晶粒(塑形更好)</p>\n<p>E：抗震</p>\n<h5 id=\"建筑钢材的力学性能\"><a href=\"#建筑钢材的力学性能\" class=\"headerlink\" title=\"建筑钢材的力学性能\"></a>建筑钢材的力学性能</h5><h4 id=\"水泥的性能和应用\"><a href=\"#水泥的性能和应用\" class=\"headerlink\" title=\"水泥的性能和应用\"></a>水泥的性能和应用</h4><p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210404143231969.png\" alt=\"image-20210404143231969\"></p>\n<p>比如水泥加水拌和以后，会凝固并产生强度叫做胶凝。</p>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210404143826315.png\" alt=\"image-20210404143826315\"></p>\n<p>水泥的技术要求</p>\n<p>凝结时间</p>\n<ul>\n<li><p>初凝：从水泥和水拌合起至水泥浆开始失去可塑性所需的时间。 要求》=45min</p>\n</li>\n<li><p>终凝：从水泥加水拌合起至水泥浆完全失去可塑性并开始产生强度所需的时间。要求：硅酸盐=&lt;6.5h.  其他五类=&lt;10h</p>\n</li>\n</ul>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210404144252938.png\" alt=\"image-20210404144252938\"></p>\n<p>失塑：失去流动性。</p>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210404144942728.png\" alt=\"image-20210404144942728\"></p>\n<h4 id=\"混凝土-外加剂-的性能和应用\"><a href=\"#混凝土-外加剂-的性能和应用\" class=\"headerlink\" title=\"混凝土(外加剂)的性能和应用\"></a>混凝土(外加剂)的性能和应用</h4><p>普通混凝土一般由：石、水泥、砂和水组成，为改善性能还常加入适量的外加剂和掺合料。</p>\n<p>混凝土在凝固的时候需要保水保温和保湿。</p>\n<h5 id=\"混凝土的技术性能\"><a href=\"#混凝土的技术性能\" class=\"headerlink\" title=\"混凝土的技术性能\"></a>混凝土的技术性能</h5><p>（一）混凝土拌合物的和易性</p>\n<p>​        和易性是指混凝土拌合物易于施工操作并能获得质量均匀、成型密实的性能，又称工作性。</p>\n<p>​        1、和易性包括<code>流动性</code>、<code>黏聚性</code>和<code>保水性</code>三个方面。</p>\n<p>​        2、用坍落度试验来测定混凝土拌合物的坍落度或坍落扩展度，作为流动性指标，<code>坍落度或坍落扩展度愈大表示流动性愈大。</code></p>\n<p>影响混凝土拌合物和易性的主要因素包括：单位体积用水量、砂率、组成材料的性质、时间和温度等。<code>单位体积用水量</code>决定水泥浆的数量和稠度，它是影响混凝土和易性的最主要因素。</p>\n<p>​        </p>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210404205358306.png\" alt=\"image-20210404205358306\"></p>\n<h5 id=\"外加剂\"><a href=\"#外加剂\" class=\"headerlink\" title=\"外加剂\"></a>外加剂</h5><p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210404205945037.png\" alt=\"image-20210404205945037\"></p>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210404210156163.png\" alt=\"image-20210404210156163\"></p>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210404210525307.png\" alt=\"image-20210404210525307\"></p>\n<h4 id=\"砂浆、砌块的技术性能和应用\"><a href=\"#砂浆、砌块的技术性能和应用\" class=\"headerlink\" title=\"砂浆、砌块的技术性能和应用\"></a>砂浆、砌块的技术性能和应用</h4><p>内容：</p>\n<ul>\n<li>砂浆的主要技术性质</li>\n<li>砌块的技术要求</li>\n</ul>\n<p>砂浆的组成材料：</p>\n<ul>\n<li>胶凝材料：常用的有水泥、石灰、石膏等。</li>\n<li>细骨料：砂子</li>\n<li>掺合料：指为改善砂浆和易性而加入的无机材料。掺合料对砂浆强度无直接影响。</li>\n</ul>\n<h5 id=\"砂浆的主要技术性质\"><a href=\"#砂浆的主要技术性质\" class=\"headerlink\" title=\"砂浆的主要技术性质\"></a>砂浆的主要技术性质</h5><ol>\n<li>流动性（<code>稠度</code>）稠度越大越稀，流动性越大</li>\n</ol>\n<p>定义：稠度是以砂浆稠度测定仪的圆锥体沉入砂浆内的深度表示。</p>\n<p>影响：沉入深度越大，砂浆的流动性越大。</p>\n<p>应用：对于吸水性强的砌体材料和高温干燥的天气，要求砂浆稠度要大些；反之，对于密实不吸水的砌体材料和湿冷天气，砂浆稠度可小些。</p>\n<p>影响稠度的因素：胶凝材料种类及数量；用水量；掺合料的种类与数量；砂的形状、粗细与级配；外加剂的种类与搀量；搅拌时间。(2020年已考)</p>\n<ol start=\"2\">\n<li>保水性</li>\n</ol>\n<p>保水性指砂浆拌合物保持水分的能力。砂浆的保水性用分层表示，砂浆的<code>分层度不得大于30mm</code>。</p>\n<ol start=\"3\">\n<li>抗压强度与强度等级</li>\n</ol>\n<p>​       砂浆强度等级是以边长为70.7mm的立方体试块，在标准养护条件，用标准试验方法测得28d期龄的抗压强度值(单位为Mpa)确定</p>\n<p>​      砂浆强度等级分为M30～M5七个等级。</p>\n<p>砂浆强度评定：</p>\n<p>(1)立方体试件以3个为一组进行评定，以三个试件测值的算数平均值作为该组试件的砂浆立方体试件抗压强度平均值(f2)(精确至0.1MPa)</p>\n<p>相互比较是否与中间值超过15%</p>\n<p>如果有一个超过15%，取中间值为准。</p>\n<p>如果两侧与中间值均超过15%，则该组试件的试验结果作废。</p>\n<h5 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210406203152849.png\" alt=\"image-20210406203152849\"></h5><h5 id=\"砌块\"><a href=\"#砌块\" class=\"headerlink\" title=\"砌块\"></a>砌块</h5><ol>\n<li>砌块的分类</li>\n</ol>\n<p>砌块按珠规格尺寸可分为小砌块、中砌块和大砌块。</p>\n<p>按其空心率大小砌块又可分为<code>空心</code>砌块和<code>实心</code>砌块两种。</p>\n<p>空心率小于25%或无孔洞的砌块为实心砌块；空心率大于或等于25%的砌块为空心砌块。    </p>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210406203632717.png\" alt=\"image-20210406203632717\"></p>\n<p>由于不是烧结的所以密度很大，不需要浇水。混凝土砌块砌筑前不允许浇水。</p>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210406203950316.png\" alt=\"image-20210406203950316\"></p>\n<h4 id=\"饰面石材、陶瓷的特性和应用\"><a href=\"#饰面石材、陶瓷的特性和应用\" class=\"headerlink\" title=\"饰面石材、陶瓷的特性和应用\"></a>饰面石材、陶瓷的特性和应用</h4><h5 id=\"饰面石材\"><a href=\"#饰面石材\" class=\"headerlink\" title=\"饰面石材\"></a>饰面石材</h5><p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210406204146830.png\" alt=\"image-20210406204146830\"></p>\n<p>花岗岩是<code>酸性</code>石材，大理石是<code>碱性</code>石材(结构单一)。</p>\n<h5 id=\"建筑卫生陶瓷\"><a href=\"#建筑卫生陶瓷\" class=\"headerlink\" title=\"建筑卫生陶瓷\"></a>建筑卫生陶瓷</h5><p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210408210537745.png\" alt=\"image-20210408210537745\"></p>\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210406210518580.png\" alt=\"image-20210406210518580\"></p>\n<h4 id=\"木材、木制品的特性和应用-每年一个\"><a href=\"#木材、木制品的特性和应用-每年一个\" class=\"headerlink\" title=\"木材、木制品的特性和应用(每年一个)\"></a>木材、木制品的特性和应用(每年一个)</h4><p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210406210818044.png\" alt=\"image-20210406210818044\"></p>\n<p>平衡含水率：在一定的湿度和温度条件下，木材中的水分与空气中的水分不再进行交换而达到稳定状态时的含水率。</p>\n<p>纤维饱和点：是木材仅细胞壁中的吸附水达饱和而细胞腔和细胞间隙中无自由水存在时的含水率。其值随树种而异，一般为25%～35%，平均值30%。它是木材物理力学性质是否随含水率而发生变化的转折点。<code>木材仅当细胞壁内吸附水的含量发生变化时才会引起木材的变形，即湿胀干缩变形</code>。</p>\n<p>木材在使用前进行烘干的主要目的是<code>使其含水率与环境湿度基本平衡</code></p>\n<p>湿胀可造成表面鼓凸。</p>\n<h5 id=\"木制品的特性和应用\"><a href=\"#木制品的特性和应用\" class=\"headerlink\" title=\"木制品的特性和应用\"></a>木制品的特性和应用</h5><p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210408210605144.png\" alt=\"image-20210408210605144\"></p>\n<h4 id=\"玻璃的特性和应用\"><a href=\"#玻璃的特性和应用\" class=\"headerlink\" title=\"玻璃的特性和应用\"></a>玻璃的特性和应用</h4><p>内容：</p>\n<ul>\n<li>净片玻璃</li>\n<li>安全玻璃的特性与应用</li>\n<li>节能装饰型玻璃的特性与应用</li>\n</ul>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210406213822056.png\" alt=\"image-20210406213822056\"></p>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210406214450873.png\" alt=\"image-20210406214450873\"></p>\n<h4 id=\"防水材料的特性和应用\"><a href=\"#防水材料的特性和应用\" class=\"headerlink\" title=\"防水材料的特性和应用\"></a>防水材料的特性和应用</h4><p>内容：</p>\n<ul>\n<li>防水卷材</li>\n<li>建筑防水涂料</li>\n<li>刚性防水材料</li>\n</ul>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210408210739661.png\" alt=\"image-20210408210739661\"></p>\n<h5 id=\"防水卷材\"><a href=\"#防水卷材\" class=\"headerlink\" title=\"防水卷材\"></a>防水卷材</h5><p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210408210926539.png\" alt=\"image-20210408210926539\"></p>\n<p>沥青本身的不透水性就很强，然后粘接的也很牢固。</p>\n<h5 id=\"建筑防水涂料-适合复杂结构\"><a href=\"#建筑防水涂料-适合复杂结构\" class=\"headerlink\" title=\"建筑防水涂料(适合复杂结构)\"></a>建筑防水涂料(适合复杂结构)</h5><p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210408211330989.png\" alt=\"image-20210408211330989\"></p>\n<h2 id=\"建筑工程专业施工技术\"><a href=\"#建筑工程专业施工技术\" class=\"headerlink\" title=\"建筑工程专业施工技术\"></a>建筑工程专业施工技术</h2><p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210412193041043.png\" alt=\"image-20210412193041043\"></p>\n<h3 id=\"主体结构工程施工技术\"><a href=\"#主体结构工程施工技术\" class=\"headerlink\" title=\"主体结构工程施工技术\"></a>主体结构工程施工技术</h3><p><code>考题</code></p>\n<ul>\n<li>钢筋混凝土结构工程 </li>\n<li>装配式工程</li>\n</ul>\n<h4 id=\"钢筋混凝土结构工程施工技术重点\"><a href=\"#钢筋混凝土结构工程施工技术重点\" class=\"headerlink\" title=\"钢筋混凝土结构工程施工技术重点\"></a>钢筋混凝土结构工程施工技术<code>重点</code></h4><p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210412193305446.png\" alt=\"image-20210412193305446\"></p>\n<h5 id=\"模板工程\"><a href=\"#模板工程\" class=\"headerlink\" title=\"模板工程\"></a>模板工程</h5><p>安装、拆卸</p>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210412193505038.png\" alt=\"image-20210412193505038\"></p>\n<h6 id=\"一-常见模板体系及其特性\"><a href=\"#一-常见模板体系及其特性\" class=\"headerlink\" title=\"(一)常见模板体系及其特性\"></a>(一)常见模板体系及其特性</h6><p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210412193703249.png\" alt=\"image-20210412193703249\"></p>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210412193901113.png\" alt=\"image-20210412193901113\"></p>\n<h6 id=\"二-模板工程设计的主要原则\"><a href=\"#二-模板工程设计的主要原则\" class=\"headerlink\" title=\"(二)模板工程设计的主要原则\"></a><code>(二)模板工程设计的主要原则</code></h6><p>(1) 实用性：模板要保证构件形状尺寸和相互位置的正确，且构造简单、支拆方便、表面平整、接缝严密不漏浆等。</p>\n<p>(2) 安全性：要具有足够的强度、刚度和稳定性，保证施工中不变形、不破坏、不倒塌。</p>\n<p>(3) 经济性：在确保工程质量、安全和工期的前提下，尽量减少一次性投入，增加模板周转次数，减少支拆用工，实现文明施工。</p>\n<h6 id=\"三-模板及支架设计应包括的主要内容\"><a href=\"#三-模板及支架设计应包括的主要内容\" class=\"headerlink\" title=\"(三)模板及支架设计应包括的主要内容\"></a><code>(三)模板及支架设计应包括的主要内容</code></h6><ol>\n<li>模板及支架的选型及构造设计；</li>\n<li>模板及支架上的荷载及其效应<code>计算</code>；</li>\n<li>模板及支架的承载力、刚度<code>验算</code>;</li>\n<li>模板及支架的抗倾覆<code>验算</code>;</li>\n<li>绘制模板及支架施工图。</li>\n</ol>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210412194754721.png\" alt=\"image-20210412194754721\"></p>\n<h6 id=\"四-模板工程的安装要点\"><a href=\"#四-模板工程的安装要点\" class=\"headerlink\" title=\"(四)模板工程的安装要点\"></a>(四)模板工程的安装要点</h6><p>(1) 模板安装应按设计与施工说明书顺序拼装。木杆、钢管、门架等支柱立柱不得混用。5米以上必须钢柱。</p>\n<p>(4) 对跨度不小于4m的现浇钢筋混凝土梁、板，其模板应按设计要求起拱；当设计无具体要求时，起拱高度应为跨度的1/1000~3/1000。</p>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210412195310416.png\" alt=\"image-20210412195310416\"></p>\n<p>(7) 模板安装应保证混凝土结构构件各部分形状、尺寸和相对位置准确；模板的<code>接缝不应漏浆</code>:在浇筑混凝土前，木模板<code>应浇水润湿</code>，但模板内不应有积水(木模板不浇水会吸走混凝土内的水分，积水也会影响混凝土的水胶比)。</p>\n<p>(8) 模板与混凝土的接触面应清理干净<code>并涂刷隔离剂</code>，不得采用影响结构性能或妨碍装饰工程的隔离剂；<code>脱模剂不得污染钢筋和混凝土接槎处</code>。</p>\n<p>(10) 浇筑混凝土前，模板内的杂物应清理干净(可设置清扫口)</p>\n<p>(13) 固定在模板上的<code>预埋件</code>、<code>预留孔</code>和<code>预留洞</code>均不得遗漏，且应安装牢固、位置准确。</p>\n<p><code>问题：</code></p>\n<p>混凝土浇筑前，项目部应对模板分项工程进行那些检查？</p>\n<p><code>答案</code>1.检查模板尺寸偏差，面板是否清洁、接缝是否密封，检查与混凝土接触面是否平整，是否按要求起拱，检查预埋件尺寸和数量，检查隔离剂涂刷。</p>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210412200402102.png\" alt=\"image-20210412200402102\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"必考：\"><a href=\"#必考：\" class=\"headerlink\" title=\"必考：\"></a>必考：</h2><ol>\n<li>钢结构</li>\n<li>混凝土</li>\n<li>民用住宅高度范围</li>\n</ol>\n<h2 id=\"建筑\"><a href=\"#建筑\" class=\"headerlink\" title=\"建筑\"></a>建筑</h2><ol>\n<li>按照高度和层数划分</li>\n</ol>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210324205933073.png\" alt=\"image-20210324205933073\"></p>\n<p>宅7公4，如果一个公共建筑只有一层但是高度是30m也叫单层，公共建筑只有一层不管多高都叫单层，但民用不是。</p>\n<p>带着问题去思考</p>\n<p>2.建筑物的组成体系</p>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210324210500460.png\" alt=\"image-20210324210500460\"></p>\n<p>结构体系：受力的。地级不属于结构体系</p>\n<p>围护体系：内墙不属于围护体系，内门窗不属于围护体系。起分割作用(能够遮蔽外界恶劣气候的侵袭，同时也起到隔声的作用)</p>\n<ol start=\"3\">\n<li><p>建筑物</p>\n</li>\n<li><p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210324211011854.png\" alt=\"image-20210324211011854\"></p>\n<p>女儿墙：屋顶的外墙</p>\n<p>从顶部看，长边叫纵，短边叫横。横向最外面的墙叫山墙。</p>\n</li>\n<li><p>民用建筑的要求</p>\n</li>\n</ol>\n<p>民用建筑的构造</p>\n<p> <img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210325204417450.png\" alt=\"image-20210325204417450\"></p>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210325204518373.png\" alt=\"image-20210325204518373\"></p>\n<p>6.</p>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210325204806360.png\" alt=\"image-20210325204806360\"></p>\n<ol start=\"7\">\n<li>楼梯及栏杆的相关规定</li>\n</ol>\n<p><img src=\"/Users/mac/Library/Application Support/typora-user-images/image-20210325212612717.png\" alt=\"image-20210325212612717\"></p>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/20210408210425.png\" alt=\"image-20210408210339225\"></p>\n<p>梯段</p>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210325213142823.png\" alt=\"image-20210325213142823\"></p>\n<ol start=\"8\">\n<li>防潮层的构造及功能</li>\n<li>墙体防潮应符合下列要求：<ol>\n<li>砌体墙应在室外地面以上，位于室内地面垫层处设置连续的水平防潮层；</li>\n<li>室内相邻地面有高差时，应在高差处墙身贴临土壤一侧加设防潮层</li>\n<li>室内墙面有防潮要求时，其迎水一侧应设防水层；室内墙面有防水要求时，其迎水一侧应设防水层；室内墙面有防污、防碰等要求时，应按使用要求设置墙裙。</li>\n</ol>\n</li>\n</ol>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210325214744965.png\" alt=\"image-20210325214744965\"></p>\n<p><img src=\"/Users/mac/Library/Application Support/typora-user-images/image-20210325214825277.png\" alt=\"image-20210325214825277\"></p>\n<h3 id=\"建筑材料\"><a href=\"#建筑材料\" class=\"headerlink\" title=\"建筑材料\"></a>建筑材料</h3><p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210408210455263.png\" alt=\"image-20210408210455263\"></p>\n<h4 id=\"常用建筑金属材料的品种、性能和应用\"><a href=\"#常用建筑金属材料的品种、性能和应用\" class=\"headerlink\" title=\"常用建筑金属材料的品种、性能和应用\"></a>常用建筑金属材料的品种、性能和应用</h4><p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210331211331828.png\" alt=\"image-20210331211331828\"></p>\n<h5 id=\"常用建筑钢材\"><a href=\"#常用建筑钢材\" class=\"headerlink\" title=\"常用建筑钢材\"></a>常用建筑钢材</h5><p>钢的概念：以铁为主要元素，含碳量为0.02%~2.06%,并含有其他元素的合金材料。</p>\n<p>分类：按含碳量分类(低、中、高)</p>\n<p>应用：优质碳素结构钢一般用于生产预应力混凝土用钢丝、钢绞线、锚具，以及高强度螺栓、重要结构的钢铸件等。</p>\n<h6 id=\"钢结构用钢\"><a href=\"#钢结构用钢\" class=\"headerlink\" title=\"钢结构用钢\"></a>钢结构用钢</h6><p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210331213443743.png\" alt=\"image-20210331213443743\"></p>\n<h6 id=\"钢筋混凝土结构用钢\"><a href=\"#钢筋混凝土结构用钢\" class=\"headerlink\" title=\"钢筋混凝土结构用钢\"></a>钢筋混凝土结构用钢</h6><p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210331213628999.png\" alt=\"image-20210331213628999\"></p>\n<p>H： 热轧             C：冷轧</p>\n<p>R：带肋(形态)     P：光圆</p>\n<p>B：钢筋</p>\n<p>F：细晶粒(塑形更好)</p>\n<p>E：抗震</p>\n<h5 id=\"建筑钢材的力学性能\"><a href=\"#建筑钢材的力学性能\" class=\"headerlink\" title=\"建筑钢材的力学性能\"></a>建筑钢材的力学性能</h5><h4 id=\"水泥的性能和应用\"><a href=\"#水泥的性能和应用\" class=\"headerlink\" title=\"水泥的性能和应用\"></a>水泥的性能和应用</h4><p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210404143231969.png\" alt=\"image-20210404143231969\"></p>\n<p>比如水泥加水拌和以后，会凝固并产生强度叫做胶凝。</p>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210404143826315.png\" alt=\"image-20210404143826315\"></p>\n<p>水泥的技术要求</p>\n<p>凝结时间</p>\n<ul>\n<li><p>初凝：从水泥和水拌合起至水泥浆开始失去可塑性所需的时间。 要求》=45min</p>\n</li>\n<li><p>终凝：从水泥加水拌合起至水泥浆完全失去可塑性并开始产生强度所需的时间。要求：硅酸盐=&lt;6.5h.  其他五类=&lt;10h</p>\n</li>\n</ul>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210404144252938.png\" alt=\"image-20210404144252938\"></p>\n<p>失塑：失去流动性。</p>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210404144942728.png\" alt=\"image-20210404144942728\"></p>\n<h4 id=\"混凝土-外加剂-的性能和应用\"><a href=\"#混凝土-外加剂-的性能和应用\" class=\"headerlink\" title=\"混凝土(外加剂)的性能和应用\"></a>混凝土(外加剂)的性能和应用</h4><p>普通混凝土一般由：石、水泥、砂和水组成，为改善性能还常加入适量的外加剂和掺合料。</p>\n<p>混凝土在凝固的时候需要保水保温和保湿。</p>\n<h5 id=\"混凝土的技术性能\"><a href=\"#混凝土的技术性能\" class=\"headerlink\" title=\"混凝土的技术性能\"></a>混凝土的技术性能</h5><p>（一）混凝土拌合物的和易性</p>\n<p>​        和易性是指混凝土拌合物易于施工操作并能获得质量均匀、成型密实的性能，又称工作性。</p>\n<p>​        1、和易性包括<code>流动性</code>、<code>黏聚性</code>和<code>保水性</code>三个方面。</p>\n<p>​        2、用坍落度试验来测定混凝土拌合物的坍落度或坍落扩展度，作为流动性指标，<code>坍落度或坍落扩展度愈大表示流动性愈大。</code></p>\n<p>影响混凝土拌合物和易性的主要因素包括：单位体积用水量、砂率、组成材料的性质、时间和温度等。<code>单位体积用水量</code>决定水泥浆的数量和稠度，它是影响混凝土和易性的最主要因素。</p>\n<p>​        </p>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210404205358306.png\" alt=\"image-20210404205358306\"></p>\n<h5 id=\"外加剂\"><a href=\"#外加剂\" class=\"headerlink\" title=\"外加剂\"></a>外加剂</h5><p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210404205945037.png\" alt=\"image-20210404205945037\"></p>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210404210156163.png\" alt=\"image-20210404210156163\"></p>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210404210525307.png\" alt=\"image-20210404210525307\"></p>\n<h4 id=\"砂浆、砌块的技术性能和应用\"><a href=\"#砂浆、砌块的技术性能和应用\" class=\"headerlink\" title=\"砂浆、砌块的技术性能和应用\"></a>砂浆、砌块的技术性能和应用</h4><p>内容：</p>\n<ul>\n<li>砂浆的主要技术性质</li>\n<li>砌块的技术要求</li>\n</ul>\n<p>砂浆的组成材料：</p>\n<ul>\n<li>胶凝材料：常用的有水泥、石灰、石膏等。</li>\n<li>细骨料：砂子</li>\n<li>掺合料：指为改善砂浆和易性而加入的无机材料。掺合料对砂浆强度无直接影响。</li>\n</ul>\n<h5 id=\"砂浆的主要技术性质\"><a href=\"#砂浆的主要技术性质\" class=\"headerlink\" title=\"砂浆的主要技术性质\"></a>砂浆的主要技术性质</h5><ol>\n<li>流动性（<code>稠度</code>）稠度越大越稀，流动性越大</li>\n</ol>\n<p>定义：稠度是以砂浆稠度测定仪的圆锥体沉入砂浆内的深度表示。</p>\n<p>影响：沉入深度越大，砂浆的流动性越大。</p>\n<p>应用：对于吸水性强的砌体材料和高温干燥的天气，要求砂浆稠度要大些；反之，对于密实不吸水的砌体材料和湿冷天气，砂浆稠度可小些。</p>\n<p>影响稠度的因素：胶凝材料种类及数量；用水量；掺合料的种类与数量；砂的形状、粗细与级配；外加剂的种类与搀量；搅拌时间。(2020年已考)</p>\n<ol start=\"2\">\n<li>保水性</li>\n</ol>\n<p>保水性指砂浆拌合物保持水分的能力。砂浆的保水性用分层表示，砂浆的<code>分层度不得大于30mm</code>。</p>\n<ol start=\"3\">\n<li>抗压强度与强度等级</li>\n</ol>\n<p>​       砂浆强度等级是以边长为70.7mm的立方体试块，在标准养护条件，用标准试验方法测得28d期龄的抗压强度值(单位为Mpa)确定</p>\n<p>​      砂浆强度等级分为M30～M5七个等级。</p>\n<p>砂浆强度评定：</p>\n<p>(1)立方体试件以3个为一组进行评定，以三个试件测值的算数平均值作为该组试件的砂浆立方体试件抗压强度平均值(f2)(精确至0.1MPa)</p>\n<p>相互比较是否与中间值超过15%</p>\n<p>如果有一个超过15%，取中间值为准。</p>\n<p>如果两侧与中间值均超过15%，则该组试件的试验结果作废。</p>\n<h5 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210406203152849.png\" alt=\"image-20210406203152849\"></h5><h5 id=\"砌块\"><a href=\"#砌块\" class=\"headerlink\" title=\"砌块\"></a>砌块</h5><ol>\n<li>砌块的分类</li>\n</ol>\n<p>砌块按珠规格尺寸可分为小砌块、中砌块和大砌块。</p>\n<p>按其空心率大小砌块又可分为<code>空心</code>砌块和<code>实心</code>砌块两种。</p>\n<p>空心率小于25%或无孔洞的砌块为实心砌块；空心率大于或等于25%的砌块为空心砌块。    </p>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210406203632717.png\" alt=\"image-20210406203632717\"></p>\n<p>由于不是烧结的所以密度很大，不需要浇水。混凝土砌块砌筑前不允许浇水。</p>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210406203950316.png\" alt=\"image-20210406203950316\"></p>\n<h4 id=\"饰面石材、陶瓷的特性和应用\"><a href=\"#饰面石材、陶瓷的特性和应用\" class=\"headerlink\" title=\"饰面石材、陶瓷的特性和应用\"></a>饰面石材、陶瓷的特性和应用</h4><h5 id=\"饰面石材\"><a href=\"#饰面石材\" class=\"headerlink\" title=\"饰面石材\"></a>饰面石材</h5><p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210406204146830.png\" alt=\"image-20210406204146830\"></p>\n<p>花岗岩是<code>酸性</code>石材，大理石是<code>碱性</code>石材(结构单一)。</p>\n<h5 id=\"建筑卫生陶瓷\"><a href=\"#建筑卫生陶瓷\" class=\"headerlink\" title=\"建筑卫生陶瓷\"></a>建筑卫生陶瓷</h5><p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210408210537745.png\" alt=\"image-20210408210537745\"></p>\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210406210518580.png\" alt=\"image-20210406210518580\"></p>\n<h4 id=\"木材、木制品的特性和应用-每年一个\"><a href=\"#木材、木制品的特性和应用-每年一个\" class=\"headerlink\" title=\"木材、木制品的特性和应用(每年一个)\"></a>木材、木制品的特性和应用(每年一个)</h4><p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210406210818044.png\" alt=\"image-20210406210818044\"></p>\n<p>平衡含水率：在一定的湿度和温度条件下，木材中的水分与空气中的水分不再进行交换而达到稳定状态时的含水率。</p>\n<p>纤维饱和点：是木材仅细胞壁中的吸附水达饱和而细胞腔和细胞间隙中无自由水存在时的含水率。其值随树种而异，一般为25%～35%，平均值30%。它是木材物理力学性质是否随含水率而发生变化的转折点。<code>木材仅当细胞壁内吸附水的含量发生变化时才会引起木材的变形，即湿胀干缩变形</code>。</p>\n<p>木材在使用前进行烘干的主要目的是<code>使其含水率与环境湿度基本平衡</code></p>\n<p>湿胀可造成表面鼓凸。</p>\n<h5 id=\"木制品的特性和应用\"><a href=\"#木制品的特性和应用\" class=\"headerlink\" title=\"木制品的特性和应用\"></a>木制品的特性和应用</h5><p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210408210605144.png\" alt=\"image-20210408210605144\"></p>\n<h4 id=\"玻璃的特性和应用\"><a href=\"#玻璃的特性和应用\" class=\"headerlink\" title=\"玻璃的特性和应用\"></a>玻璃的特性和应用</h4><p>内容：</p>\n<ul>\n<li>净片玻璃</li>\n<li>安全玻璃的特性与应用</li>\n<li>节能装饰型玻璃的特性与应用</li>\n</ul>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210406213822056.png\" alt=\"image-20210406213822056\"></p>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210406214450873.png\" alt=\"image-20210406214450873\"></p>\n<h4 id=\"防水材料的特性和应用\"><a href=\"#防水材料的特性和应用\" class=\"headerlink\" title=\"防水材料的特性和应用\"></a>防水材料的特性和应用</h4><p>内容：</p>\n<ul>\n<li>防水卷材</li>\n<li>建筑防水涂料</li>\n<li>刚性防水材料</li>\n</ul>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210408210739661.png\" alt=\"image-20210408210739661\"></p>\n<h5 id=\"防水卷材\"><a href=\"#防水卷材\" class=\"headerlink\" title=\"防水卷材\"></a>防水卷材</h5><p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210408210926539.png\" alt=\"image-20210408210926539\"></p>\n<p>沥青本身的不透水性就很强，然后粘接的也很牢固。</p>\n<h5 id=\"建筑防水涂料-适合复杂结构\"><a href=\"#建筑防水涂料-适合复杂结构\" class=\"headerlink\" title=\"建筑防水涂料(适合复杂结构)\"></a>建筑防水涂料(适合复杂结构)</h5><p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210408211330989.png\" alt=\"image-20210408211330989\"></p>\n<h2 id=\"建筑工程专业施工技术\"><a href=\"#建筑工程专业施工技术\" class=\"headerlink\" title=\"建筑工程专业施工技术\"></a>建筑工程专业施工技术</h2><p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210412193041043.png\" alt=\"image-20210412193041043\"></p>\n<h3 id=\"主体结构工程施工技术\"><a href=\"#主体结构工程施工技术\" class=\"headerlink\" title=\"主体结构工程施工技术\"></a>主体结构工程施工技术</h3><p><code>考题</code></p>\n<ul>\n<li>钢筋混凝土结构工程 </li>\n<li>装配式工程</li>\n</ul>\n<h4 id=\"钢筋混凝土结构工程施工技术重点\"><a href=\"#钢筋混凝土结构工程施工技术重点\" class=\"headerlink\" title=\"钢筋混凝土结构工程施工技术重点\"></a>钢筋混凝土结构工程施工技术<code>重点</code></h4><p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210412193305446.png\" alt=\"image-20210412193305446\"></p>\n<h5 id=\"模板工程\"><a href=\"#模板工程\" class=\"headerlink\" title=\"模板工程\"></a>模板工程</h5><p>安装、拆卸</p>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210412193505038.png\" alt=\"image-20210412193505038\"></p>\n<h6 id=\"一-常见模板体系及其特性\"><a href=\"#一-常见模板体系及其特性\" class=\"headerlink\" title=\"(一)常见模板体系及其特性\"></a>(一)常见模板体系及其特性</h6><p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210412193703249.png\" alt=\"image-20210412193703249\"></p>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210412193901113.png\" alt=\"image-20210412193901113\"></p>\n<h6 id=\"二-模板工程设计的主要原则\"><a href=\"#二-模板工程设计的主要原则\" class=\"headerlink\" title=\"(二)模板工程设计的主要原则\"></a><code>(二)模板工程设计的主要原则</code></h6><p>(1) 实用性：模板要保证构件形状尺寸和相互位置的正确，且构造简单、支拆方便、表面平整、接缝严密不漏浆等。</p>\n<p>(2) 安全性：要具有足够的强度、刚度和稳定性，保证施工中不变形、不破坏、不倒塌。</p>\n<p>(3) 经济性：在确保工程质量、安全和工期的前提下，尽量减少一次性投入，增加模板周转次数，减少支拆用工，实现文明施工。</p>\n<h6 id=\"三-模板及支架设计应包括的主要内容\"><a href=\"#三-模板及支架设计应包括的主要内容\" class=\"headerlink\" title=\"(三)模板及支架设计应包括的主要内容\"></a><code>(三)模板及支架设计应包括的主要内容</code></h6><ol>\n<li>模板及支架的选型及构造设计；</li>\n<li>模板及支架上的荷载及其效应<code>计算</code>；</li>\n<li>模板及支架的承载力、刚度<code>验算</code>;</li>\n<li>模板及支架的抗倾覆<code>验算</code>;</li>\n<li>绘制模板及支架施工图。</li>\n</ol>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210412194754721.png\" alt=\"image-20210412194754721\"></p>\n<h6 id=\"四-模板工程的安装要点\"><a href=\"#四-模板工程的安装要点\" class=\"headerlink\" title=\"(四)模板工程的安装要点\"></a>(四)模板工程的安装要点</h6><p>(1) 模板安装应按设计与施工说明书顺序拼装。木杆、钢管、门架等支柱立柱不得混用。5米以上必须钢柱。</p>\n<p>(4) 对跨度不小于4m的现浇钢筋混凝土梁、板，其模板应按设计要求起拱；当设计无具体要求时，起拱高度应为跨度的1/1000~3/1000。</p>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210412195310416.png\" alt=\"image-20210412195310416\"></p>\n<p>(7) 模板安装应保证混凝土结构构件各部分形状、尺寸和相对位置准确；模板的<code>接缝不应漏浆</code>:在浇筑混凝土前，木模板<code>应浇水润湿</code>，但模板内不应有积水(木模板不浇水会吸走混凝土内的水分，积水也会影响混凝土的水胶比)。</p>\n<p>(8) 模板与混凝土的接触面应清理干净<code>并涂刷隔离剂</code>，不得采用影响结构性能或妨碍装饰工程的隔离剂；<code>脱模剂不得污染钢筋和混凝土接槎处</code>。</p>\n<p>(10) 浇筑混凝土前，模板内的杂物应清理干净(可设置清扫口)</p>\n<p>(13) 固定在模板上的<code>预埋件</code>、<code>预留孔</code>和<code>预留洞</code>均不得遗漏，且应安装牢固、位置准确。</p>\n<p><code>问题：</code></p>\n<p>混凝土浇筑前，项目部应对模板分项工程进行那些检查？</p>\n<p><code>答案</code>1.检查模板尺寸偏差，面板是否清洁、接缝是否密封，检查与混凝土接触面是否平整，是否按要求起拱，检查预埋件尺寸和数量，检查隔离剂涂刷。</p>\n<p><img src=\"https://gitee.com/JefferyZero/imgcloud/raw/master/img/image-20210412200402102.png\" alt=\"image-20210412200402102\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckn6309la0003251yf9a454ua","category_id":"ckn6309le0004251y6y5m8eqp","_id":"ckn6309lh0007251y7cmc4wyh"}],"PostTag":[{"post_id":"ckn6309la0003251yf9a454ua","tag_id":"ckn6309lf0005251y3wf254h5","_id":"ckn6309lg0006251y1pj501k3"}],"Tag":[{"name":"管理与实务","_id":"ckn6309lf0005251y3wf254h5"}]}}